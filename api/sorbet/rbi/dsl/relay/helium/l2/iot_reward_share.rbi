# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Relay::Helium::L2::IotRewardShare`.
# Please instead update this file by running `bin/tapioca dsl Relay::Helium::L2::IotRewardShare`.


class Relay::Helium::L2::IotRewardShare
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Relay::Helium::L2::IotRewardShare).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(T::Array[::Relay::Helium::L2::IotRewardShare])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig do
      params(
        column_name: NilClass,
        block: T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void
      ).returns(Integer)
    end
    def count(column_name = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(T::Array[::Relay::Helium::L2::IotRewardShare])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(T::Array[::Relay::Helium::L2::IotRewardShare])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(T::Array[::Relay::Helium::L2::IotRewardShare])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(T::Array[::Relay::Helium::L2::IotRewardShare])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Relay::Helium::L2::IotRewardShare]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Relay::Helium::L2::IotRewardShare)) }
    def fifth; end

    sig { returns(::Relay::Helium::L2::IotRewardShare) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Relay::Helium::L2::IotRewardShare])
    end
    sig do
      params(
        args: NilClass,
        block: T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void
      ).returns(T.nilable(::Relay::Helium::L2::IotRewardShare))
    end
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Relay::Helium::L2::IotRewardShare)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Relay::Helium::L2::IotRewardShare) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Relay::Helium::L2::IotRewardShare])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Relay::Helium::L2::IotRewardShare]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Relay::Helium::L2::IotRewardShare]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(T::Array[::Relay::Helium::L2::IotRewardShare])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(T::Array[::Relay::Helium::L2::IotRewardShare])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(T::Array[::Relay::Helium::L2::IotRewardShare])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Relay::Helium::L2::IotRewardShare)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Relay::Helium::L2::IotRewardShare) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Relay::Helium::L2::IotRewardShare) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Relay::Helium::L2::IotRewardShare)) }
    sig { params(limit: Integer).returns(T::Array[::Relay::Helium::L2::IotRewardShare]) }
    def first(limit = nil); end

    sig { returns(::Relay::Helium::L2::IotRewardShare) }
    def first!; end

    sig { returns(T.nilable(::Relay::Helium::L2::IotRewardShare)) }
    def forty_two; end

    sig { returns(::Relay::Helium::L2::IotRewardShare) }
    def forty_two!; end

    sig { returns(T.nilable(::Relay::Helium::L2::IotRewardShare)) }
    def fourth; end

    sig { returns(::Relay::Helium::L2::IotRewardShare) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Relay::Helium::L2::IotRewardShare)) }
    sig { params(limit: Integer).returns(T::Array[::Relay::Helium::L2::IotRewardShare]) }
    def last(limit = nil); end

    sig { returns(::Relay::Helium::L2::IotRewardShare) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Relay::Helium::L2::IotRewardShare).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(T::Array[::Relay::Helium::L2::IotRewardShare])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).void)
      ).returns(::Relay::Helium::L2::IotRewardShare)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Relay::Helium::L2::IotRewardShare).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Relay::Helium::L2::IotRewardShare).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Relay::Helium::L2::IotRewardShare)) }
    def second; end

    sig { returns(::Relay::Helium::L2::IotRewardShare) }
    def second!; end

    sig { returns(T.nilable(::Relay::Helium::L2::IotRewardShare)) }
    def second_to_last; end

    sig { returns(::Relay::Helium::L2::IotRewardShare) }
    def second_to_last!; end

    sig { returns(::Relay::Helium::L2::IotRewardShare) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Relay::Helium::L2::IotRewardShare).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Relay::Helium::L2::IotRewardShare)) }
    sig { params(limit: Integer).returns(T::Array[::Relay::Helium::L2::IotRewardShare]) }
    def take(limit = nil); end

    sig { returns(::Relay::Helium::L2::IotRewardShare) }
    def take!; end

    sig { returns(T.nilable(::Relay::Helium::L2::IotRewardShare)) }
    def third; end

    sig { returns(::Relay::Helium::L2::IotRewardShare) }
    def third!; end

    sig { returns(T.nilable(::Relay::Helium::L2::IotRewardShare)) }
    def third_to_last; end

    sig { returns(::Relay::Helium::L2::IotRewardShare) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Relay::Helium::L2::File) }
    def build_file(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Relay::Helium::L2::File) }
    def create_file(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Relay::Helium::L2::File) }
    def create_file!(*args, &blk); end

    sig { returns(T.nilable(::Relay::Helium::L2::File)) }
    def file; end

    sig { params(value: T.nilable(::Relay::Helium::L2::File)).void }
    def file=(value); end

    sig { returns(T::Boolean) }
    def file_changed?; end

    sig { returns(T::Boolean) }
    def file_previously_changed?; end

    sig { returns(T.nilable(::Relay::Helium::L2::File)) }
    def reload_file; end

    sig { void }
    def reset_file; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig do
      params(
        blk: T.proc.params(record: ::Relay::Helium::L2::IotRewardShare).returns(BasicObject)
      ).returns(T::Array[::Relay::Helium::L2::IotRewardShare])
    end
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def amount; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def amount=(value); end

    sig { returns(T::Boolean) }
    def amount?; end

    sig { returns(T.nilable(::Integer)) }
    def amount_before_last_save; end

    sig { returns(T.untyped) }
    def amount_before_type_cast; end

    sig { returns(T::Boolean) }
    def amount_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def amount_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def amount_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def amount_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def amount_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def amount_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def amount_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def amount_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def amount_was; end

    sig { void }
    def amount_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def beacon_amount; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def beacon_amount=(value); end

    sig { returns(T::Boolean) }
    def beacon_amount?; end

    sig { returns(T.nilable(::Integer)) }
    def beacon_amount_before_last_save; end

    sig { returns(T.untyped) }
    def beacon_amount_before_type_cast; end

    sig { returns(T::Boolean) }
    def beacon_amount_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def beacon_amount_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def beacon_amount_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def beacon_amount_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def beacon_amount_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def beacon_amount_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def beacon_amount_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def beacon_amount_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def beacon_amount_was; end

    sig { void }
    def beacon_amount_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def dc_transfer_amount; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def dc_transfer_amount=(value); end

    sig { returns(T::Boolean) }
    def dc_transfer_amount?; end

    sig { returns(T.nilable(::Integer)) }
    def dc_transfer_amount_before_last_save; end

    sig { returns(T.untyped) }
    def dc_transfer_amount_before_type_cast; end

    sig { returns(T::Boolean) }
    def dc_transfer_amount_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def dc_transfer_amount_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def dc_transfer_amount_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def dc_transfer_amount_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def dc_transfer_amount_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def dc_transfer_amount_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def dc_transfer_amount_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def dc_transfer_amount_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def dc_transfer_amount_was; end

    sig { void }
    def dc_transfer_amount_will_change!; end

    sig { returns(::String) }
    def deduplication_key; end

    sig { params(value: ::String).returns(::String) }
    def deduplication_key=(value); end

    sig { returns(T::Boolean) }
    def deduplication_key?; end

    sig { returns(T.nilable(::String)) }
    def deduplication_key_before_last_save; end

    sig { returns(T.untyped) }
    def deduplication_key_before_type_cast; end

    sig { returns(T::Boolean) }
    def deduplication_key_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def deduplication_key_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def deduplication_key_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def deduplication_key_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def deduplication_key_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def deduplication_key_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def deduplication_key_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def deduplication_key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def deduplication_key_was; end

    sig { void }
    def deduplication_key_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def end_period; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def end_period=(value); end

    sig { returns(T::Boolean) }
    def end_period?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def end_period_before_last_save; end

    sig { returns(T.untyped) }
    def end_period_before_type_cast; end

    sig { returns(T::Boolean) }
    def end_period_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def end_period_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def end_period_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def end_period_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def end_period_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def end_period_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def end_period_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def end_period_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def end_period_was; end

    sig { void }
    def end_period_will_change!; end

    sig { returns(::String) }
    def file_category; end

    sig { params(value: ::String).returns(::String) }
    def file_category=(value); end

    sig { returns(T::Boolean) }
    def file_category?; end

    sig { returns(T.nilable(::String)) }
    def file_category_before_last_save; end

    sig { returns(T.untyped) }
    def file_category_before_type_cast; end

    sig { returns(T::Boolean) }
    def file_category_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def file_category_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def file_category_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def file_category_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def file_category_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def file_category_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def file_category_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def file_category_previously_was; end

    sig { returns(T.nilable(::String)) }
    def file_category_was; end

    sig { void }
    def file_category_will_change!; end

    sig { returns(::String) }
    def file_name; end

    sig { params(value: ::String).returns(::String) }
    def file_name=(value); end

    sig { returns(T::Boolean) }
    def file_name?; end

    sig { returns(T.nilable(::String)) }
    def file_name_before_last_save; end

    sig { returns(T.untyped) }
    def file_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def file_name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def file_name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def file_name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def file_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def file_name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def file_name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def file_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def file_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def file_name_was; end

    sig { void }
    def file_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def hotspot_key; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def hotspot_key=(value); end

    sig { returns(T::Boolean) }
    def hotspot_key?; end

    sig { returns(T.nilable(::String)) }
    def hotspot_key_before_last_save; end

    sig { returns(T.untyped) }
    def hotspot_key_before_type_cast; end

    sig { returns(T::Boolean) }
    def hotspot_key_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def hotspot_key_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def hotspot_key_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def hotspot_key_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def hotspot_key_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def hotspot_key_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def hotspot_key_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def hotspot_key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def hotspot_key_was; end

    sig { void }
    def hotspot_key_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { void }
    def restore_amount!; end

    sig { void }
    def restore_beacon_amount!; end

    sig { void }
    def restore_dc_transfer_amount!; end

    sig { void }
    def restore_deduplication_key!; end

    sig { void }
    def restore_end_period!; end

    sig { void }
    def restore_file_category!; end

    sig { void }
    def restore_file_name!; end

    sig { void }
    def restore_hotspot_key!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_reward_type!; end

    sig { void }
    def restore_start_period!; end

    sig { void }
    def restore_unallocated_reward_type!; end

    sig { void }
    def restore_witness_amount!; end

    sig { returns(T.nilable(::String)) }
    def reward_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def reward_type=(value); end

    sig { returns(T::Boolean) }
    def reward_type?; end

    sig { returns(T.nilable(::String)) }
    def reward_type_before_last_save; end

    sig { returns(T.untyped) }
    def reward_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def reward_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reward_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reward_type_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def reward_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reward_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reward_type_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def reward_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reward_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def reward_type_was; end

    sig { void }
    def reward_type_will_change!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_amount; end

    sig { returns(T::Boolean) }
    def saved_change_to_amount?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_beacon_amount; end

    sig { returns(T::Boolean) }
    def saved_change_to_beacon_amount?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_dc_transfer_amount; end

    sig { returns(T::Boolean) }
    def saved_change_to_dc_transfer_amount?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_deduplication_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_deduplication_key?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_end_period; end

    sig { returns(T::Boolean) }
    def saved_change_to_end_period?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_file_category; end

    sig { returns(T::Boolean) }
    def saved_change_to_file_category?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_file_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_file_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_hotspot_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_hotspot_key?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_reward_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_reward_type?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_start_period; end

    sig { returns(T::Boolean) }
    def saved_change_to_start_period?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_unallocated_reward_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_unallocated_reward_type?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_witness_amount; end

    sig { returns(T::Boolean) }
    def saved_change_to_witness_amount?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def start_period; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def start_period=(value); end

    sig { returns(T::Boolean) }
    def start_period?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def start_period_before_last_save; end

    sig { returns(T.untyped) }
    def start_period_before_type_cast; end

    sig { returns(T::Boolean) }
    def start_period_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def start_period_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def start_period_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def start_period_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def start_period_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def start_period_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def start_period_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def start_period_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def start_period_was; end

    sig { void }
    def start_period_will_change!; end

    sig { returns(T.nilable(::String)) }
    def unallocated_reward_type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def unallocated_reward_type=(value); end

    sig { returns(T::Boolean) }
    def unallocated_reward_type?; end

    sig { returns(T.nilable(::String)) }
    def unallocated_reward_type_before_last_save; end

    sig { returns(T.untyped) }
    def unallocated_reward_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def unallocated_reward_type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unallocated_reward_type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unallocated_reward_type_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def unallocated_reward_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def unallocated_reward_type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def unallocated_reward_type_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def unallocated_reward_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def unallocated_reward_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def unallocated_reward_type_was; end

    sig { void }
    def unallocated_reward_type_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_amount?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_beacon_amount?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_dc_transfer_amount?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deduplication_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_end_period?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_file_category?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_file_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hotspot_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reward_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_start_period?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_unallocated_reward_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_witness_amount?; end

    sig { returns(T.nilable(::Integer)) }
    def witness_amount; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def witness_amount=(value); end

    sig { returns(T::Boolean) }
    def witness_amount?; end

    sig { returns(T.nilable(::Integer)) }
    def witness_amount_before_last_save; end

    sig { returns(T.untyped) }
    def witness_amount_before_type_cast; end

    sig { returns(T::Boolean) }
    def witness_amount_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def witness_amount_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def witness_amount_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def witness_amount_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def witness_amount_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def witness_amount_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def witness_amount_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def witness_amount_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def witness_amount_was; end

    sig { void }
    def witness_amount_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig do
      params(
        blk: T.proc.params(record: ::Relay::Helium::L2::IotRewardShare).returns(BasicObject)
      ).returns(T::Array[::Relay::Helium::L2::IotRewardShare])
    end
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Relay::Helium::L2::IotRewardShare } }

    sig { returns(T::Array[::Relay::Helium::L2::IotRewardShare]) }
    def to_a; end

    sig { returns(T::Array[::Relay::Helium::L2::IotRewardShare]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Relay::Helium::L2::IotRewardShare } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Relay::Helium::L2::IotRewardShare } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Relay::Helium::L2::IotRewardShare } }

    sig do
      params(
        records: T.any(::Relay::Helium::L2::IotRewardShare, T::Enumerable[T.any(::Relay::Helium::L2::IotRewardShare, T::Enumerable[::Relay::Helium::L2::IotRewardShare])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Relay::Helium::L2::IotRewardShare, T::Enumerable[T.any(::Relay::Helium::L2::IotRewardShare, T::Enumerable[::Relay::Helium::L2::IotRewardShare])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Relay::Helium::L2::IotRewardShare, T::Enumerable[T.any(::Relay::Helium::L2::IotRewardShare, T::Enumerable[::Relay::Helium::L2::IotRewardShare])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Relay::Helium::L2::IotRewardShare]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Relay::Helium::L2::IotRewardShare, T::Enumerable[T.any(::Relay::Helium::L2::IotRewardShare, T::Enumerable[::Relay::Helium::L2::IotRewardShare])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Relay::Helium::L2::IotRewardShare, T::Enumerable[T.any(::Relay::Helium::L2::IotRewardShare, T::Enumerable[::Relay::Helium::L2::IotRewardShare])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Relay::Helium::L2::IotRewardShare, T::Enumerable[T.any(::Relay::Helium::L2::IotRewardShare, T::Enumerable[::Relay::Helium::L2::IotRewardShare])])
      ).returns(T::Array[::Relay::Helium::L2::IotRewardShare])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Relay::Helium::L2::IotRewardShare]) }
    def target; end

    sig { returns(T::Array[::Relay::Helium::L2::IotRewardShare]) }
    def to_a; end

    sig { returns(T::Array[::Relay::Helium::L2::IotRewardShare]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Relay::Helium::L2::IotRewardShare } }

    sig { returns(T::Array[::Relay::Helium::L2::IotRewardShare]) }
    def to_a; end

    sig { returns(T::Array[::Relay::Helium::L2::IotRewardShare]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Relay::Helium::L2::IotRewardShare } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Relay::Helium::L2::IotRewardShare } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
