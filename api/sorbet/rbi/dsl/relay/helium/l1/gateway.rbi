# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Relay::Helium::L1::Gateway`.
# Please instead update this file by running `bin/tapioca dsl Relay::Helium::L1::Gateway`.


class Relay::Helium::L1::Gateway
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Relay::Helium::L1::Gateway).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(T::Array[::Relay::Helium::L1::Gateway])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig do
      params(
        column_name: NilClass,
        block: T.proc.params(object: ::Relay::Helium::L1::Gateway).void
      ).returns(Integer)
    end
    def count(column_name = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(T::Array[::Relay::Helium::L1::Gateway])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(T::Array[::Relay::Helium::L1::Gateway])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(T::Array[::Relay::Helium::L1::Gateway])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(T::Array[::Relay::Helium::L1::Gateway])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Relay::Helium::L1::Gateway]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Relay::Helium::L1::Gateway)) }
    def fifth; end

    sig { returns(::Relay::Helium::L1::Gateway) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Relay::Helium::L1::Gateway)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Relay::Helium::L1::Gateway])
    end
    sig do
      params(
        args: NilClass,
        block: T.proc.params(object: ::Relay::Helium::L1::Gateway).void
      ).returns(T.nilable(::Relay::Helium::L1::Gateway))
    end
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Relay::Helium::L1::Gateway)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Relay::Helium::L1::Gateway) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Relay::Helium::L1::Gateway).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Relay::Helium::L1::Gateway])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Relay::Helium::L1::Gateway]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Relay::Helium::L1::Gateway]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(T::Array[::Relay::Helium::L1::Gateway])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(T::Array[::Relay::Helium::L1::Gateway])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(T::Array[::Relay::Helium::L1::Gateway])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Relay::Helium::L1::Gateway)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Relay::Helium::L1::Gateway) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Relay::Helium::L1::Gateway) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Relay::Helium::L1::Gateway)) }
    sig { params(limit: Integer).returns(T::Array[::Relay::Helium::L1::Gateway]) }
    def first(limit = nil); end

    sig { returns(::Relay::Helium::L1::Gateway) }
    def first!; end

    sig { returns(T.nilable(::Relay::Helium::L1::Gateway)) }
    def forty_two; end

    sig { returns(::Relay::Helium::L1::Gateway) }
    def forty_two!; end

    sig { returns(T.nilable(::Relay::Helium::L1::Gateway)) }
    def fourth; end

    sig { returns(::Relay::Helium::L1::Gateway) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Relay::Helium::L1::Gateway)) }
    sig { params(limit: Integer).returns(T::Array[::Relay::Helium::L1::Gateway]) }
    def last(limit = nil); end

    sig { returns(::Relay::Helium::L1::Gateway) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Relay::Helium::L1::Gateway).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(T::Array[::Relay::Helium::L1::Gateway])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Relay::Helium::L1::Gateway).void)
      ).returns(::Relay::Helium::L1::Gateway)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Relay::Helium::L1::Gateway).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::Relay::Helium::L1::Gateway).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Relay::Helium::L1::Gateway)) }
    def second; end

    sig { returns(::Relay::Helium::L1::Gateway) }
    def second!; end

    sig { returns(T.nilable(::Relay::Helium::L1::Gateway)) }
    def second_to_last; end

    sig { returns(::Relay::Helium::L1::Gateway) }
    def second_to_last!; end

    sig { returns(::Relay::Helium::L1::Gateway) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Relay::Helium::L1::Gateway).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Relay::Helium::L1::Gateway)) }
    sig { params(limit: Integer).returns(T::Array[::Relay::Helium::L1::Gateway]) }
    def take(limit = nil); end

    sig { returns(::Relay::Helium::L1::Gateway) }
    def take!; end

    sig { returns(T.nilable(::Relay::Helium::L1::Gateway)) }
    def third; end

    sig { returns(::Relay::Helium::L1::Gateway) }
    def third!; end

    sig { returns(T.nilable(::Relay::Helium::L1::Gateway)) }
    def third_to_last; end

    sig { returns(::Relay::Helium::L1::Gateway) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Relay::Helium::L1::Account) }
    def build_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Relay::Helium::L1::Account) }
    def build_payer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Relay::Helium::L1::Account) }
    def create_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Relay::Helium::L1::Account) }
    def create_owner!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Relay::Helium::L1::Account) }
    def create_payer(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Relay::Helium::L1::Account) }
    def create_payer!(*args, &blk); end

    sig { returns(T.nilable(::Relay::Helium::L1::Account)) }
    def owner; end

    sig { params(value: T.nilable(::Relay::Helium::L1::Account)).void }
    def owner=(value); end

    sig { returns(T::Boolean) }
    def owner_changed?; end

    sig { returns(T::Boolean) }
    def owner_previously_changed?; end

    sig { returns(T::Array[T.untyped]) }
    def packet_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def packet_ids=(ids); end

    # This method is created by ActiveRecord on the `Relay::Helium::L1::Gateway` class because it declared `has_many :packets`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Relay::Helium::L1::Packet::PrivateCollectionProxy) }
    def packets; end

    sig { params(value: T::Enumerable[::Relay::Helium::L1::Packet]).void }
    def packets=(value); end

    sig { returns(T.nilable(::Relay::Helium::L1::Account)) }
    def payer; end

    sig { params(value: T.nilable(::Relay::Helium::L1::Account)).void }
    def payer=(value); end

    sig { returns(T::Boolean) }
    def payer_changed?; end

    sig { returns(T::Boolean) }
    def payer_previously_changed?; end

    sig { returns(T.nilable(::Relay::Helium::L1::Account)) }
    def reload_owner; end

    sig { returns(T.nilable(::Relay::Helium::L1::Account)) }
    def reload_payer; end

    sig { void }
    def reset_owner; end

    sig { void }
    def reset_payer; end

    sig { returns(T::Array[T.untyped]) }
    def reward_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reward_ids=(ids); end

    # This method is created by ActiveRecord on the `Relay::Helium::L1::Gateway` class because it declared `has_many :rewards`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Relay::Helium::L1::Reward::PrivateCollectionProxy) }
    def rewards; end

    sig { params(value: T::Enumerable[::Relay::Helium::L1::Reward]).void }
    def rewards=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig do
      params(
        blk: T.proc.params(record: ::Relay::Helium::L1::Gateway).returns(BasicObject)
      ).returns(T::Array[::Relay::Helium::L1::Gateway])
    end
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::String) }
    def address; end

    sig { params(value: ::String).returns(::String) }
    def address=(value); end

    sig { returns(T::Boolean) }
    def address?; end

    sig { returns(T.nilable(::String)) }
    def address_before_last_save; end

    sig { returns(T.untyped) }
    def address_before_type_cast; end

    sig { returns(T::Boolean) }
    def address_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def address_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def address_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def address_previously_was; end

    sig { returns(T.nilable(::String)) }
    def address_was; end

    sig { void }
    def address_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def elevation; end

    sig { params(value: ::Integer).returns(::Integer) }
    def elevation=(value); end

    sig { returns(T::Boolean) }
    def elevation?; end

    sig { returns(T.nilable(::Integer)) }
    def elevation_before_last_save; end

    sig { returns(T.untyped) }
    def elevation_before_type_cast; end

    sig { returns(T::Boolean) }
    def elevation_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def elevation_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def elevation_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def elevation_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def elevation_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def elevation_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def elevation_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def elevation_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def elevation_was; end

    sig { void }
    def elevation_will_change!; end

    sig { returns(::Integer) }
    def first_block; end

    sig { params(value: ::Integer).returns(::Integer) }
    def first_block=(value); end

    sig { returns(T::Boolean) }
    def first_block?; end

    sig { returns(T.nilable(::Integer)) }
    def first_block_before_last_save; end

    sig { returns(T.untyped) }
    def first_block_before_type_cast; end

    sig { returns(T::Boolean) }
    def first_block_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def first_block_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def first_block_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def first_block_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def first_block_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def first_block_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def first_block_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def first_block_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def first_block_was; end

    sig { void }
    def first_block_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def first_timestamp; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def first_timestamp=(value); end

    sig { returns(T::Boolean) }
    def first_timestamp?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def first_timestamp_before_last_save; end

    sig { returns(T.untyped) }
    def first_timestamp_before_type_cast; end

    sig { returns(T::Boolean) }
    def first_timestamp_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def first_timestamp_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def first_timestamp_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def first_timestamp_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def first_timestamp_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def first_timestamp_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def first_timestamp_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def first_timestamp_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def first_timestamp_was; end

    sig { void }
    def first_timestamp_will_change!; end

    sig { returns(::Integer) }
    def gain; end

    sig { params(value: ::Integer).returns(::Integer) }
    def gain=(value); end

    sig { returns(T::Boolean) }
    def gain?; end

    sig { returns(T.nilable(::Integer)) }
    def gain_before_last_save; end

    sig { returns(T.untyped) }
    def gain_before_type_cast; end

    sig { returns(T::Boolean) }
    def gain_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def gain_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def gain_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def gain_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def gain_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def gain_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def gain_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def gain_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def gain_was; end

    sig { void }
    def gain_will_change!; end

    sig { returns(::String) }
    def id; end

    sig { params(value: ::String).returns(::String) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::String)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_previously_was; end

    sig { returns(::String) }
    def id_value; end

    sig { params(value: ::String).returns(::String) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::String)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def id_value_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::String)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def last_block; end

    sig { params(value: ::Integer).returns(::Integer) }
    def last_block=(value); end

    sig { returns(T::Boolean) }
    def last_block?; end

    sig { returns(T.nilable(::Integer)) }
    def last_block_before_last_save; end

    sig { returns(T.untyped) }
    def last_block_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_block_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def last_block_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def last_block_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def last_block_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_block_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def last_block_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def last_block_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_block_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def last_block_was; end

    sig { void }
    def last_block_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def last_poc_challenge; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def last_poc_challenge=(value); end

    sig { returns(T::Boolean) }
    def last_poc_challenge?; end

    sig { returns(T.nilable(::Integer)) }
    def last_poc_challenge_before_last_save; end

    sig { returns(T.untyped) }
    def last_poc_challenge_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_poc_challenge_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_poc_challenge_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_poc_challenge_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_poc_challenge_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_poc_challenge_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_poc_challenge_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_poc_challenge_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_poc_challenge_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def last_poc_challenge_was; end

    sig { void }
    def last_poc_challenge_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_poc_onion_key_hash; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_poc_onion_key_hash=(value); end

    sig { returns(T::Boolean) }
    def last_poc_onion_key_hash?; end

    sig { returns(T.nilable(::String)) }
    def last_poc_onion_key_hash_before_last_save; end

    sig { returns(T.untyped) }
    def last_poc_onion_key_hash_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_poc_onion_key_hash_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_poc_onion_key_hash_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_poc_onion_key_hash_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_poc_onion_key_hash_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_poc_onion_key_hash_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_poc_onion_key_hash_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_poc_onion_key_hash_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_poc_onion_key_hash_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_poc_onion_key_hash_was; end

    sig { void }
    def last_poc_onion_key_hash_will_change!; end

    sig { returns(T.nilable(::String)) }
    def location; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def location=(value); end

    sig { returns(T::Boolean) }
    def location?; end

    sig { returns(T.nilable(::String)) }
    def location_before_last_save; end

    sig { returns(T.untyped) }
    def location_before_type_cast; end

    sig { returns(T::Boolean) }
    def location_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def location_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_hex; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def location_hex=(value); end

    sig { returns(T::Boolean) }
    def location_hex?; end

    sig { returns(T.nilable(::String)) }
    def location_hex_before_last_save; end

    sig { returns(T.untyped) }
    def location_hex_before_type_cast; end

    sig { returns(T::Boolean) }
    def location_hex_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_hex_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_hex_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def location_hex_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_hex_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_hex_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def location_hex_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_hex_previously_was; end

    sig { returns(T.nilable(::String)) }
    def location_hex_was; end

    sig { void }
    def location_hex_will_change!; end

    sig { returns(T.nilable(::String)) }
    def location_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def location_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def location_previously_was; end

    sig { returns(T.nilable(::String)) }
    def location_was; end

    sig { void }
    def location_will_change!; end

    sig { returns(::String) }
    def mode; end

    sig { params(value: ::String).returns(::String) }
    def mode=(value); end

    sig { returns(T::Boolean) }
    def mode?; end

    sig { returns(T.nilable(::String)) }
    def mode_before_last_save; end

    sig { returns(T.untyped) }
    def mode_before_type_cast; end

    sig { returns(T::Boolean) }
    def mode_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def mode_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def mode_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def mode_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def mode_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def mode_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def mode_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def mode_previously_was; end

    sig { returns(T.nilable(::String)) }
    def mode_was; end

    sig { void }
    def mode_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(::Integer) }
    def nonce; end

    sig { params(value: ::Integer).returns(::Integer) }
    def nonce=(value); end

    sig { returns(T::Boolean) }
    def nonce?; end

    sig { returns(T.nilable(::Integer)) }
    def nonce_before_last_save; end

    sig { returns(T.untyped) }
    def nonce_before_type_cast; end

    sig { returns(T::Boolean) }
    def nonce_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def nonce_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def nonce_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def nonce_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def nonce_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def nonce_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def nonce_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def nonce_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def nonce_was; end

    sig { void }
    def nonce_will_change!; end

    sig { returns(::String) }
    def owner_address; end

    sig { params(value: ::String).returns(::String) }
    def owner_address=(value); end

    sig { returns(T::Boolean) }
    def owner_address?; end

    sig { returns(T.nilable(::String)) }
    def owner_address_before_last_save; end

    sig { returns(T.untyped) }
    def owner_address_before_type_cast; end

    sig { returns(T::Boolean) }
    def owner_address_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def owner_address_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def owner_address_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def owner_address_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def owner_address_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def owner_address_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def owner_address_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def owner_address_previously_was; end

    sig { returns(T.nilable(::String)) }
    def owner_address_was; end

    sig { void }
    def owner_address_will_change!; end

    sig { returns(T.nilable(::String)) }
    def payer_address; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def payer_address=(value); end

    sig { returns(T::Boolean) }
    def payer_address?; end

    sig { returns(T.nilable(::String)) }
    def payer_address_before_last_save; end

    sig { returns(T.untyped) }
    def payer_address_before_type_cast; end

    sig { returns(T::Boolean) }
    def payer_address_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payer_address_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payer_address_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def payer_address_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payer_address_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def payer_address_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def payer_address_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def payer_address_previously_was; end

    sig { returns(T.nilable(::String)) }
    def payer_address_was; end

    sig { void }
    def payer_address_will_change!; end

    sig { void }
    def restore_address!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_elevation!; end

    sig { void }
    def restore_first_block!; end

    sig { void }
    def restore_first_timestamp!; end

    sig { void }
    def restore_gain!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_last_block!; end

    sig { void }
    def restore_last_poc_challenge!; end

    sig { void }
    def restore_last_poc_onion_key_hash!; end

    sig { void }
    def restore_location!; end

    sig { void }
    def restore_location_hex!; end

    sig { void }
    def restore_mode!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_nonce!; end

    sig { void }
    def restore_owner_address!; end

    sig { void }
    def restore_payer_address!; end

    sig { void }
    def restore_reward_scale!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_witnesses!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def reward_scale; end

    sig { params(value: T.nilable(::BigDecimal)).returns(T.nilable(::BigDecimal)) }
    def reward_scale=(value); end

    sig { returns(T::Boolean) }
    def reward_scale?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def reward_scale_before_last_save; end

    sig { returns(T.untyped) }
    def reward_scale_before_type_cast; end

    sig { returns(T::Boolean) }
    def reward_scale_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def reward_scale_change; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def reward_scale_change_to_be_saved; end

    sig { params(from: T.nilable(::BigDecimal), to: T.nilable(::BigDecimal)).returns(T::Boolean) }
    def reward_scale_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def reward_scale_in_database; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def reward_scale_previous_change; end

    sig { params(from: T.nilable(::BigDecimal), to: T.nilable(::BigDecimal)).returns(T::Boolean) }
    def reward_scale_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::BigDecimal)) }
    def reward_scale_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def reward_scale_was; end

    sig { void }
    def reward_scale_will_change!; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_address; end

    sig { returns(T::Boolean) }
    def saved_change_to_address?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_elevation; end

    sig { returns(T::Boolean) }
    def saved_change_to_elevation?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_first_block; end

    sig { returns(T::Boolean) }
    def saved_change_to_first_block?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_first_timestamp; end

    sig { returns(T::Boolean) }
    def saved_change_to_first_timestamp?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_gain; end

    sig { returns(T::Boolean) }
    def saved_change_to_gain?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_last_block; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_block?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_last_poc_challenge; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_poc_challenge?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_poc_onion_key_hash; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_poc_onion_key_hash?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_location; end

    sig { returns(T::Boolean) }
    def saved_change_to_location?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_location_hex; end

    sig { returns(T::Boolean) }
    def saved_change_to_location_hex?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_mode; end

    sig { returns(T::Boolean) }
    def saved_change_to_mode?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_nonce; end

    sig { returns(T::Boolean) }
    def saved_change_to_nonce?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_owner_address; end

    sig { returns(T::Boolean) }
    def saved_change_to_owner_address?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_payer_address; end

    sig { returns(T::Boolean) }
    def saved_change_to_payer_address?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def saved_change_to_reward_scale; end

    sig { returns(T::Boolean) }
    def saved_change_to_reward_scale?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_witnesses; end

    sig { returns(T::Boolean) }
    def saved_change_to_witnesses?; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_address?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_elevation?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_first_block?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_first_timestamp?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_gain?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_block?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_poc_challenge?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_poc_onion_key_hash?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_location?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_location_hex?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mode?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_nonce?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_owner_address?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_payer_address?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reward_scale?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_witnesses?; end

    sig { returns(T.untyped) }
    def witnesses; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def witnesses=(value); end

    sig { returns(T::Boolean) }
    def witnesses?; end

    sig { returns(T.untyped) }
    def witnesses_before_last_save; end

    sig { returns(T.untyped) }
    def witnesses_before_type_cast; end

    sig { returns(T::Boolean) }
    def witnesses_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def witnesses_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def witnesses_change_to_be_saved; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def witnesses_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def witnesses_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def witnesses_previous_change; end

    sig { params(from: T.untyped, to: T.untyped).returns(T::Boolean) }
    def witnesses_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.untyped) }
    def witnesses_previously_was; end

    sig { returns(T.untyped) }
    def witnesses_was; end

    sig { void }
    def witnesses_will_change!; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig do
      params(
        blk: T.proc.params(record: ::Relay::Helium::L1::Gateway).returns(BasicObject)
      ).returns(T::Array[::Relay::Helium::L1::Gateway])
    end
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Relay::Helium::L1::Gateway } }

    sig { returns(T::Array[::Relay::Helium::L1::Gateway]) }
    def to_a; end

    sig { returns(T::Array[::Relay::Helium::L1::Gateway]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Relay::Helium::L1::Gateway } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Relay::Helium::L1::Gateway } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Relay::Helium::L1::Gateway } }

    sig do
      params(
        records: T.any(::Relay::Helium::L1::Gateway, T::Enumerable[T.any(::Relay::Helium::L1::Gateway, T::Enumerable[::Relay::Helium::L1::Gateway])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Relay::Helium::L1::Gateway, T::Enumerable[T.any(::Relay::Helium::L1::Gateway, T::Enumerable[::Relay::Helium::L1::Gateway])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Relay::Helium::L1::Gateway, T::Enumerable[T.any(::Relay::Helium::L1::Gateway, T::Enumerable[::Relay::Helium::L1::Gateway])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Relay::Helium::L1::Gateway]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Relay::Helium::L1::Gateway, T::Enumerable[T.any(::Relay::Helium::L1::Gateway, T::Enumerable[::Relay::Helium::L1::Gateway])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Relay::Helium::L1::Gateway, T::Enumerable[T.any(::Relay::Helium::L1::Gateway, T::Enumerable[::Relay::Helium::L1::Gateway])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Relay::Helium::L1::Gateway, T::Enumerable[T.any(::Relay::Helium::L1::Gateway, T::Enumerable[::Relay::Helium::L1::Gateway])])
      ).returns(T::Array[::Relay::Helium::L1::Gateway])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Relay::Helium::L1::Gateway]) }
    def target; end

    sig { returns(T::Array[::Relay::Helium::L1::Gateway]) }
    def to_a; end

    sig { returns(T::Array[::Relay::Helium::L1::Gateway]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Relay::Helium::L1::Gateway } }

    sig { returns(T::Array[::Relay::Helium::L1::Gateway]) }
    def to_a; end

    sig { returns(T::Array[::Relay::Helium::L1::Gateway]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Relay::Helium::L1::Gateway } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig { returns(T::Hash[T.untyped, Integer]) }
    def size; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Relay::Helium::L1::Gateway } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
