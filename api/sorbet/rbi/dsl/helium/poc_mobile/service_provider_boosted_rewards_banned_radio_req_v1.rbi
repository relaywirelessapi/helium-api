# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Helium::PocMobile::Service_provider_boosted_rewards_banned_radio_req_v1`.
# Please instead update this file by running `bin/tapioca dsl Helium::PocMobile::Service_provider_boosted_rewards_banned_radio_req_v1`.


class Helium::PocMobile::Service_provider_boosted_rewards_banned_radio_req_v1 < Google::Protobuf::AbstractMessage
  sig do
    params(
      ban_type: T.nilable(T.any(Symbol, Integer)),
      cbsd_id: T.nilable(String),
      hotspot_key: T.nilable(String),
      pubkey: T.nilable(String),
      reason: T.nilable(T.any(Symbol, Integer)),
      signature: T.nilable(String),
      until: T.nilable(Integer)
    ).void
  end
  def initialize(ban_type: nil, cbsd_id: nil, hotspot_key: nil, pubkey: nil, reason: nil, signature: nil, until: nil); end

  sig { returns(T.any(Symbol, Integer)) }
  def ban_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def ban_type=(value); end

  sig { returns(String) }
  def cbsd_id; end

  sig { params(value: String).void }
  def cbsd_id=(value); end

  sig { void }
  def clear_ban_type; end

  sig { void }
  def clear_cbsd_id; end

  sig { void }
  def clear_hotspot_key; end

  sig { void }
  def clear_pubkey; end

  sig { void }
  def clear_reason; end

  sig { void }
  def clear_signature; end

  sig { void }
  def clear_until; end

  sig { returns(Object) }
  def has_cbsd_id?; end

  sig { returns(Object) }
  def has_hotspot_key?; end

  sig { returns(String) }
  def hotspot_key; end

  sig { params(value: String).void }
  def hotspot_key=(value); end

  sig { returns(T.nilable(Symbol)) }
  def key_type; end

  sig { returns(String) }
  def pubkey; end

  sig { params(value: String).void }
  def pubkey=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def reason; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def reason=(value); end

  sig { returns(String) }
  def signature; end

  sig { params(value: String).void }
  def signature=(value); end

  sig { returns(Integer) }
  def until; end

  sig { params(value: Integer).void }
  def until=(value); end
end
