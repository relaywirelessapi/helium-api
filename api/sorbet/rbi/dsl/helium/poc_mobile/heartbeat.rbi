# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Helium::PocMobile::Heartbeat`.
# Please instead update this file by running `bin/tapioca dsl Helium::PocMobile::Heartbeat`.


class Helium::PocMobile::Heartbeat < Google::Protobuf::AbstractMessage
  sig do
    params(
      cbsd_id: T.nilable(String),
      cell_type: T.nilable(T.any(Symbol, Integer)),
      coverage_object: T.nilable(String),
      distance_to_asserted: T.nilable(Integer),
      lat: T.nilable(Float),
      location_source: T.nilable(T.any(Symbol, Integer)),
      location_trust_score_multiplier: T.nilable(Integer),
      location_validation_timestamp: T.nilable(Integer),
      lon: T.nilable(Float),
      pub_key: T.nilable(String),
      reward_multiplier: T.nilable(Float),
      timestamp: T.nilable(Integer),
      validity: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(cbsd_id: nil, cell_type: nil, coverage_object: nil, distance_to_asserted: nil, lat: nil, location_source: nil, location_trust_score_multiplier: nil, location_validation_timestamp: nil, lon: nil, pub_key: nil, reward_multiplier: nil, timestamp: nil, validity: nil); end

  sig { returns(String) }
  def cbsd_id; end

  sig { params(value: String).void }
  def cbsd_id=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def cell_type; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def cell_type=(value); end

  sig { void }
  def clear_cbsd_id; end

  sig { void }
  def clear_cell_type; end

  sig { void }
  def clear_coverage_object; end

  sig { void }
  def clear_distance_to_asserted; end

  sig { void }
  def clear_lat; end

  sig { void }
  def clear_location_source; end

  sig { void }
  def clear_location_trust_score_multiplier; end

  sig { void }
  def clear_location_validation_timestamp; end

  sig { void }
  def clear_lon; end

  sig { void }
  def clear_pub_key; end

  sig { void }
  def clear_reward_multiplier; end

  sig { void }
  def clear_timestamp; end

  sig { void }
  def clear_validity; end

  sig { returns(String) }
  def coverage_object; end

  sig { params(value: String).void }
  def coverage_object=(value); end

  sig { returns(Integer) }
  def distance_to_asserted; end

  sig { params(value: Integer).void }
  def distance_to_asserted=(value); end

  sig { returns(Float) }
  def lat; end

  sig { params(value: Float).void }
  def lat=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def location_source; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def location_source=(value); end

  sig { returns(Integer) }
  def location_trust_score_multiplier; end

  sig { params(value: Integer).void }
  def location_trust_score_multiplier=(value); end

  sig { returns(Integer) }
  def location_validation_timestamp; end

  sig { params(value: Integer).void }
  def location_validation_timestamp=(value); end

  sig { returns(Float) }
  def lon; end

  sig { params(value: Float).void }
  def lon=(value); end

  sig { returns(String) }
  def pub_key; end

  sig { params(value: String).void }
  def pub_key=(value); end

  sig { returns(Float) }
  def reward_multiplier; end

  sig { params(value: Float).void }
  def reward_multiplier=(value); end

  sig { returns(Integer) }
  def timestamp; end

  sig { params(value: Integer).void }
  def timestamp=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def validity; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def validity=(value); end
end
