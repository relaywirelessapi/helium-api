# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Helium::PocMobile::Radio_reward_v2::Covered_hex`.
# Please instead update this file by running `bin/tapioca dsl Helium::PocMobile::Radio_reward_v2::Covered_hex`.


class Helium::PocMobile::Radio_reward_v2::Covered_hex < Google::Protobuf::AbstractMessage
  sig do
    params(
      assignment_multiplier: T.nilable(Helium::Decimal),
      base_coverage_points: T.nilable(Helium::Decimal),
      boosted_coverage_points: T.nilable(Helium::Decimal),
      boosted_multiplier: T.nilable(Integer),
      footfall: T.nilable(T.any(Symbol, Integer)),
      landtype: T.nilable(T.any(Symbol, Integer)),
      location: T.nilable(Integer),
      rank: T.nilable(Integer),
      rank_multiplier: T.nilable(Helium::Decimal),
      service_provider_override: T.nilable(T::Boolean),
      urbanized: T.nilable(T.any(Symbol, Integer))
    ).void
  end
  def initialize(assignment_multiplier: nil, base_coverage_points: nil, boosted_coverage_points: nil, boosted_multiplier: nil, footfall: nil, landtype: nil, location: nil, rank: nil, rank_multiplier: nil, service_provider_override: nil, urbanized: nil); end

  sig { returns(T.nilable(Helium::Decimal)) }
  def assignment_multiplier; end

  sig { params(value: T.nilable(Helium::Decimal)).void }
  def assignment_multiplier=(value); end

  sig { returns(T.nilable(Helium::Decimal)) }
  def base_coverage_points; end

  sig { params(value: T.nilable(Helium::Decimal)).void }
  def base_coverage_points=(value); end

  sig { returns(T.nilable(Helium::Decimal)) }
  def boosted_coverage_points; end

  sig { params(value: T.nilable(Helium::Decimal)).void }
  def boosted_coverage_points=(value); end

  sig { returns(Integer) }
  def boosted_multiplier; end

  sig { params(value: Integer).void }
  def boosted_multiplier=(value); end

  sig { void }
  def clear_assignment_multiplier; end

  sig { void }
  def clear_base_coverage_points; end

  sig { void }
  def clear_boosted_coverage_points; end

  sig { void }
  def clear_boosted_multiplier; end

  sig { void }
  def clear_footfall; end

  sig { void }
  def clear_landtype; end

  sig { void }
  def clear_location; end

  sig { void }
  def clear_rank; end

  sig { void }
  def clear_rank_multiplier; end

  sig { void }
  def clear_service_provider_override; end

  sig { void }
  def clear_urbanized; end

  sig { returns(T.any(Symbol, Integer)) }
  def footfall; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def footfall=(value); end

  sig { returns(Object) }
  def has_assignment_multiplier?; end

  sig { returns(Object) }
  def has_base_coverage_points?; end

  sig { returns(Object) }
  def has_boosted_coverage_points?; end

  sig { returns(Object) }
  def has_rank_multiplier?; end

  sig { returns(T.any(Symbol, Integer)) }
  def landtype; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def landtype=(value); end

  sig { returns(Integer) }
  def location; end

  sig { params(value: Integer).void }
  def location=(value); end

  sig { returns(Integer) }
  def rank; end

  sig { params(value: Integer).void }
  def rank=(value); end

  sig { returns(T.nilable(Helium::Decimal)) }
  def rank_multiplier; end

  sig { params(value: T.nilable(Helium::Decimal)).void }
  def rank_multiplier=(value); end

  sig { returns(T::Boolean) }
  def service_provider_override; end

  sig { params(value: T::Boolean).void }
  def service_provider_override=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def urbanized; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def urbanized=(value); end
end
