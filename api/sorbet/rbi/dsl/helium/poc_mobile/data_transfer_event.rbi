# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Helium::PocMobile::Data_transfer_event`.
# Please instead update this file by running `bin/tapioca dsl Helium::PocMobile::Data_transfer_event`.


class Helium::PocMobile::Data_transfer_event < Google::Protobuf::AbstractMessage
  sig do
    params(
      download_bytes: T.nilable(Integer),
      event_id: T.nilable(String),
      payer: T.nilable(String),
      pub_key: T.nilable(String),
      radio_access_technology: T.nilable(T.any(Symbol, Integer)),
      signature: T.nilable(String),
      timestamp: T.nilable(Integer),
      upload_bytes: T.nilable(Integer)
    ).void
  end
  def initialize(download_bytes: nil, event_id: nil, payer: nil, pub_key: nil, radio_access_technology: nil, signature: nil, timestamp: nil, upload_bytes: nil); end

  sig { void }
  def clear_download_bytes; end

  sig { void }
  def clear_event_id; end

  sig { void }
  def clear_payer; end

  sig { void }
  def clear_pub_key; end

  sig { void }
  def clear_radio_access_technology; end

  sig { void }
  def clear_signature; end

  sig { void }
  def clear_timestamp; end

  sig { void }
  def clear_upload_bytes; end

  sig { returns(Integer) }
  def download_bytes; end

  sig { params(value: Integer).void }
  def download_bytes=(value); end

  sig { returns(String) }
  def event_id; end

  sig { params(value: String).void }
  def event_id=(value); end

  sig { returns(String) }
  def payer; end

  sig { params(value: String).void }
  def payer=(value); end

  sig { returns(String) }
  def pub_key; end

  sig { params(value: String).void }
  def pub_key=(value); end

  sig { returns(T.any(Symbol, Integer)) }
  def radio_access_technology; end

  sig { params(value: T.any(Symbol, Integer)).void }
  def radio_access_technology=(value); end

  sig { returns(String) }
  def signature; end

  sig { params(value: String).void }
  def signature=(value); end

  sig { returns(Integer) }
  def timestamp; end

  sig { params(value: Integer).void }
  def timestamp=(value); end

  sig { returns(Integer) }
  def upload_bytes; end

  sig { params(value: Integer).void }
  def upload_bytes=(value); end
end
