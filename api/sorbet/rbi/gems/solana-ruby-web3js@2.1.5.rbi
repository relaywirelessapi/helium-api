# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `solana-ruby-web3js` gem.
# Please instead update this file by running `bin/tapioca gem solana-ruby-web3js`.


# Dir["solana_ruby/*.rb"].each { |f| require_relative f.delete(".rb") }
#
# source://solana-ruby-web3js//lib/solana_ruby/base_client.rb#3
module SolanaRuby; end

# source://solana-ruby-web3js//lib/solana_ruby/base_client.rb#4
class SolanaRuby::BaseClient
  private

  # source://solana-ruby-web3js//lib/solana_ruby/base_client.rb#25
  def handle_error(error); end

  # source://solana-ruby-web3js//lib/solana_ruby/base_client.rb#9
  def handle_http_response(response); end
end

# source://solana-ruby-web3js//lib/solana_ruby/data_types.rb#2
module SolanaRuby::DataTypes
  extend ::SolanaRuby::DataTypes

  # source://solana-ruby-web3js//lib/solana_ruby/data_types.rb#21
  def blob1; end

  # source://solana-ruby-web3js//lib/solana_ruby/data_types.rb#25
  def blob32; end

  # source://solana-ruby-web3js//lib/solana_ruby/data_types.rb#17
  def near_int64; end

  # source://solana-ruby-web3js//lib/solana_ruby/data_types.rb#9
  def uint32; end

  # source://solana-ruby-web3js//lib/solana_ruby/data_types.rb#13
  def uint64; end

  # source://solana-ruby-web3js//lib/solana_ruby/data_types.rb#5
  def uint8; end
end

# source://solana-ruby-web3js//lib/solana_ruby/data_types/blob.rb#3
class SolanaRuby::DataTypes::Blob
  # Constructor to initialize size of the blob
  #
  # @raise [ArgumentError]
  # @return [Blob] a new instance of Blob
  #
  # source://solana-ruby-web3js//lib/solana_ruby/data_types/blob.rb#7
  def initialize(size); end

  # Deserialize a byte array into the original object format
  #
  # @raise [ArgumentError]
  #
  # source://solana-ruby-web3js//lib/solana_ruby/data_types/blob.rb#22
  def deserialize(bytes); end

  # Serialize the given object to a byte array
  #
  # @raise [ArgumentError]
  #
  # source://solana-ruby-web3js//lib/solana_ruby/data_types/blob.rb#13
  def serialize(obj); end

  # Returns the value of attribute size.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/data_types/blob.rb#4
  def size; end
end

# source://solana-ruby-web3js//lib/solana_ruby/data_types/layout.rb#3
class SolanaRuby::DataTypes::Layout
  # @return [Layout] a new instance of Layout
  #
  # source://solana-ruby-web3js//lib/solana_ruby/data_types/layout.rb#6
  def initialize(fields); end

  # source://solana-ruby-web3js//lib/solana_ruby/data_types/layout.rb#17
  def deserialize(bytes); end

  # Returns the value of attribute fields.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/data_types/layout.rb#4
  def fields; end

  # source://solana-ruby-web3js//lib/solana_ruby/data_types/layout.rb#10
  def serialize(params); end
end

# source://solana-ruby-web3js//lib/solana_ruby/data_types/near_int64.rb#3
class SolanaRuby::DataTypes::NearInt64
  # @return [NearInt64] a new instance of NearInt64
  #
  # source://solana-ruby-web3js//lib/solana_ruby/data_types/near_int64.rb#8
  def initialize; end

  # source://solana-ruby-web3js//lib/solana_ruby/data_types/near_int64.rb#18
  def deserialize(bytes); end

  # source://solana-ruby-web3js//lib/solana_ruby/data_types/near_int64.rb#28
  def divmod_int64(obj); end

  # source://solana-ruby-web3js//lib/solana_ruby/data_types/near_int64.rb#35
  def rounded_int64(hi32, lo32); end

  # source://solana-ruby-web3js//lib/solana_ruby/data_types/near_int64.rb#12
  def serialize(obj); end

  # Returns the value of attribute size.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/data_types/near_int64.rb#4
  def size; end
end

# source://solana-ruby-web3js//lib/solana_ruby/data_types/near_int64.rb#6
SolanaRuby::DataTypes::NearInt64::V2E32 = T.let(T.unsafe(nil), Integer)

# source://solana-ruby-web3js//lib/solana_ruby/data_types/sequence.rb#3
class SolanaRuby::DataTypes::Sequence
  # @return [Sequence] a new instance of Sequence
  #
  # source://solana-ruby-web3js//lib/solana_ruby/data_types/sequence.rb#4
  def initialize(count, type); end

  # source://solana-ruby-web3js//lib/solana_ruby/data_types/sequence.rb#15
  def deserialize(bytes); end

  # source://solana-ruby-web3js//lib/solana_ruby/data_types/sequence.rb#9
  def serialize(items); end
end

# source://solana-ruby-web3js//lib/solana_ruby/data_types/unsigned_int.rb#3
class SolanaRuby::DataTypes::UnsignedInt
  # @return [UnsignedInt] a new instance of UnsignedInt
  #
  # source://solana-ruby-web3js//lib/solana_ruby/data_types/unsigned_int.rb#12
  def initialize(bits); end

  # Deserialize bytes into the unsigned integer
  #
  # source://solana-ruby-web3js//lib/solana_ruby/data_types/unsigned_int.rb#33
  def deserialize(bytes); end

  # Serialize the unsigned integer into properly aligned bytes
  #
  # source://solana-ruby-web3js//lib/solana_ruby/data_types/unsigned_int.rb#21
  def serialize(obj); end

  # Returns the value of attribute size.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/data_types/unsigned_int.rb#4
  def size; end
end

# source://solana-ruby-web3js//lib/solana_ruby/data_types/unsigned_int.rb#6
SolanaRuby::DataTypes::UnsignedInt::BITS = T.let(T.unsafe(nil), Hash)

# source://solana-ruby-web3js//lib/solana_ruby/ed25519_curve_checker.rb#2
class SolanaRuby::Ed25519CurveChecker
  class << self
    # @return [Boolean]
    #
    # source://solana-ruby-web3js//lib/solana_ruby/ed25519_curve_checker.rb#10
    def on_curve?(public_key); end
  end
end

# Ed25519 constant
#
# source://solana-ruby-web3js//lib/solana_ruby/ed25519_curve_checker.rb#8
SolanaRuby::Ed25519CurveChecker::D = T.let(T.unsafe(nil), Integer)

# Constants for the Ed25519 curve
#
# source://solana-ruby-web3js//lib/solana_ruby/ed25519_curve_checker.rb#7
SolanaRuby::Ed25519CurveChecker::Q = T.let(T.unsafe(nil), Integer)

# source://solana-ruby-web3js//lib/solana_ruby.rb#6
class SolanaRuby::Error < ::StandardError; end

# source://solana-ruby-web3js//lib/solana_ruby/http_client.rb#12
class SolanaRuby::HttpClient < ::SolanaRuby::BaseClient
  include ::SolanaRuby::HttpMethods::BasicMethods
  include ::SolanaRuby::HttpMethods::LookupTableMethods
  include ::SolanaRuby::HttpMethods::TransactionMethods
  include ::SolanaRuby::HttpMethods::SignatureMethods
  include ::SolanaRuby::HttpMethods::BlockhashMethods
  include ::SolanaRuby::HttpMethods::BlockMethods
  include ::SolanaRuby::HttpMethods::AccountMethods
  include ::SolanaRuby::HttpMethods::TokenMethods
  include ::SolanaRuby::HttpMethods::SlotMethods

  # @return [HttpClient] a new instance of HttpClient
  #
  # source://solana-ruby-web3js//lib/solana_ruby/http_client.rb#20
  def initialize(endpoint = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_client.rb#24
  def request(method, params = T.unsafe(nil)); end
end

# source://solana-ruby-web3js//lib/solana_ruby/http_client.rb#18
SolanaRuby::HttpClient::BASE_URL = T.let(T.unsafe(nil), String)

# source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#4
module SolanaRuby::HttpMethods; end

# Account Related HTTP Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#6
module SolanaRuby::HttpMethods::AccountMethods
  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#11
  def get_account_info(pubkey); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#20
  def get_account_info_and_context(pubkey, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#40
  def get_largest_accounts(options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#25
  def get_multiple_account_info(pubkeys, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#30
  def get_multiple_account_info_and_context(pubkeys, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#36
  def get_multiple_parsed_accounts(pubkeys, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#83
  def get_nonce(pubkey); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#66
  def get_nonce_and_context(pubkey); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#16
  def get_parsed_account_info(pubkey, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#51
  def get_parsed_program_accounts(program_id, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#60
  def get_parsed_token_accounts_by_owner(owner_pubkey, filters = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#45
  def get_program_accounts(program_id, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#55
  def get_vote_accounts(options = T.unsafe(nil)); end

  private

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#90
  def parse_nonce_account(data); end
end

# source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#9
SolanaRuby::HttpMethods::AccountMethods::ENCODING_BASE58_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#7
SolanaRuby::HttpMethods::AccountMethods::ENCODING_JSON_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://solana-ruby-web3js//lib/solana_ruby/http_methods/account_methods.rb#8
SolanaRuby::HttpMethods::AccountMethods::FINALIZED_OPTIONS = T.let(T.unsafe(nil), Hash)

# Basic Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#6
module SolanaRuby::HttpMethods::BasicMethods
  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#9
  def get_balance(pubkey); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#14
  def get_balance_and_context(pubkey); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#19
  def get_epoch_info(options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#24
  def get_epoch_schedule; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#29
  def get_genesis_hash; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#86
  def get_health; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#91
  def get_identity; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#34
  def get_inflation_governor; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#39
  def get_inflation_rate; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#44
  def get_inflation_reward(addresses, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#49
  def get_leader_schedule(options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#54
  def get_minimum_balance_for_rent_exemption(account_data_size, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#96
  def get_recent_performance_samples(limit = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#101
  def get_recent_prioritization_fees(addresses); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#60
  def get_stake_activation(account_pubkey, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#66
  def get_stake_minimum_delegation(options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#71
  def get_supply(options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#81
  def get_total_supply(options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#76
  def get_version; end
end

# source://solana-ruby-web3js//lib/solana_ruby/http_methods/basic_methods.rb#7
SolanaRuby::HttpMethods::BasicMethods::FINALIZED_OPTIONS = T.let(T.unsafe(nil), Hash)

# Block Related HTTP Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#6
module SolanaRuby::HttpMethods::BlockMethods
  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#15
  def get_block(slot, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#72
  def get_block_commitment(block_slot); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#67
  def get_block_height; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#21
  def get_block_production; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#30
  def get_block_signatures(slot, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#25
  def get_block_time(slot); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#9
  def get_blocks(start_slot, end_slot); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#61
  def get_blocks_with_limit(start_slot, limit); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#35
  def get_cluster_nodes; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#40
  def get_confirmed_block(slot, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#45
  def get_confirmed_block_signatures(slot); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#56
  def get_first_available_block; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#50
  def get_parsed_block(slot, options = T.unsafe(nil)); end

  private

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#79
  def block_signatures(block_info); end
end

# source://solana-ruby-web3js//lib/solana_ruby/http_methods/block_methods.rb#7
SolanaRuby::HttpMethods::BlockMethods::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# Blockhash Related HTTP Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/http_methods/blockhash_methods.rb#6
module SolanaRuby::HttpMethods::BlockhashMethods
  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/blockhash_methods.rb#17
  def get_fee_for_message(blockhash, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/blockhash_methods.rb#7
  def get_latest_blockhash; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/blockhash_methods.rb#12
  def get_latest_blockhash_and_context; end

  # @return [Boolean]
  #
  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/blockhash_methods.rb#23
  def is_blockhash_valid?(blockhash, options = T.unsafe(nil)); end
end

# Lookup Table Related HTTP Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/http_methods/lookup_table_methods.rb#6
module SolanaRuby::HttpMethods::LookupTableMethods
  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/lookup_table_methods.rb#7
  def get_address_lookup_table(pubkey); end

  private

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/lookup_table_methods.rb#25
  def decode_lookup_table_data(data); end
end

# Signature Related Web Socket Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/http_methods/signature_methods.rb#6
module SolanaRuby::HttpMethods::SignatureMethods
  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/signature_methods.rb#12
  def get_signature_status(signature, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/signature_methods.rb#7
  def get_signature_statuses(signatures, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/signature_methods.rb#17
  def get_signatures_for_address(address, options = T.unsafe(nil)); end

  private

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/signature_methods.rb#24
  def signature_request(method, params); end
end

# Slot Related HTTP Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/http_methods/slot_methods.rb#6
module SolanaRuby::HttpMethods::SlotMethods
  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/slot_methods.rb#23
  def get_highest_snapshot_slot; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/slot_methods.rb#33
  def get_max_retransmit_slot; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/slot_methods.rb#38
  def get_max_shred_insert_slot; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/slot_methods.rb#28
  def get_minimum_ledger_slot; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/slot_methods.rb#7
  def get_slot; end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/slot_methods.rb#12
  def get_slot_leader(options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/slot_methods.rb#17
  def get_slot_leaders(start_slot, limit); end
end

# Token Related HTTP Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/http_methods/token_methods.rb#6
module SolanaRuby::HttpMethods::TokenMethods
  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/token_methods.rb#19
  def get_token_accounts_by_owner(owner_pubkey, filters = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/token_methods.rb#9
  def get_token_balance(pubkey, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/token_methods.rb#25
  def get_token_largest_accounts(mint_pubkey, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/token_methods.rb#14
  def get_token_supply(pubkey); end
end

# source://solana-ruby-web3js//lib/solana_ruby/http_methods/token_methods.rb#7
SolanaRuby::HttpMethods::TokenMethods::FINALIZED_OPTIONS = T.let(T.unsafe(nil), Hash)

# Transaction Related HTTP Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#6
module SolanaRuby::HttpMethods::TransactionMethods
  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#19
  def confirm_transaction(signature, commitment = T.unsafe(nil), timeout = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#41
  def get_transaction(signature, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#47
  def get_transaction_count(options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#52
  def get_transactions(signatures, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#61
  def request_airdrop(pubkey, lamports, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#73
  def send_encoded_transaction(encoded_transaction, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#77
  def send_raw_transaction(raw_transaction, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#13
  def send_transaction(signed_transaction, options = T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#67
  def simulate_transaction(transaction, options = T.unsafe(nil)); end
end

# source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#7
SolanaRuby::HttpMethods::TransactionMethods::DEFAULT_COMMITMENT = T.let(T.unsafe(nil), String)

# source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#10
SolanaRuby::HttpMethods::TransactionMethods::ENCODED_TRANSACTION_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#11
SolanaRuby::HttpMethods::TransactionMethods::FINALIZED_OPTIONS = T.let(T.unsafe(nil), Hash)

# seconds
#
# source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#9
SolanaRuby::HttpMethods::TransactionMethods::RETRY_INTERVAL = T.let(T.unsafe(nil), Integer)

# seconds
#
# source://solana-ruby-web3js//lib/solana_ruby/http_methods/transaction_methods.rb#8
SolanaRuby::HttpMethods::TransactionMethods::TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://solana-ruby-web3js//lib/solana_ruby/keypair.rb#2
class SolanaRuby::Keypair
  class << self
    # Restores a keypair from a private key in hex format
    #
    # @raise [ArgumentError]
    #
    # source://solana-ruby-web3js//lib/solana_ruby/keypair.rb#15
    def from_private_key(private_key_hex); end

    # Generates a new Ed25519 keypair
    #
    # source://solana-ruby-web3js//lib/solana_ruby/keypair.rb#7
    def generate; end

    # source://solana-ruby-web3js//lib/solana_ruby/keypair.rb#53
    def keys(signing_key, private_key_bytes); end

    # Load a keypair from a JSON file
    #
    # source://solana-ruby-web3js//lib/solana_ruby/keypair.rb#28
    def load_keypair(file_path); end
  end
end

# source://solana-ruby-web3js//lib/solana_ruby/message.rb#2
class SolanaRuby::Message
  # @return [Message] a new instance of Message
  #
  # source://solana-ruby-web3js//lib/solana_ruby/message.rb#7
  def initialize(header:, account_keys:, recent_blockhash:, instructions:); end

  # Returns the value of attribute account_keys.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/message.rb#5
  def account_keys; end

  # Returns the value of attribute header.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/message.rb#5
  def header; end

  # Returns the value of attribute instructions.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/message.rb#5
  def instructions; end

  # source://solana-ruby-web3js//lib/solana_ruby/message.rb#102
  def is_account_writable(index); end

  # Returns the value of attribute recent_blockhash.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/message.rb#5
  def recent_blockhash; end

  # source://solana-ruby-web3js//lib/solana_ruby/message.rb#52
  def serialize; end

  class << self
    # source://solana-ruby-web3js//lib/solana_ruby/message.rb#14
    def from(bytes); end
  end
end

# source://solana-ruby-web3js//lib/solana_ruby/message.rb#3
SolanaRuby::Message::PUBKEY_LENGTH = T.let(T.unsafe(nil), Integer)

# source://solana-ruby-web3js//lib/solana_ruby/public_key.rb#5
class SolanaRuby::PublicKey
  # @return [PublicKey] a new instance of PublicKey
  #
  # source://solana-ruby-web3js//lib/solana_ruby/public_key.rb#10
  def initialize(value); end

  # Returns the value of attribute bn.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/public_key.rb#8
  def bn; end

  # Converts the public key to Base58
  #
  # source://solana-ruby-web3js//lib/solana_ruby/public_key.rb#28
  def to_base58; end

  # Converts the public key to a binary string
  #
  # source://solana-ruby-web3js//lib/solana_ruby/public_key.rb#33
  def to_bytes; end

  private

  # source://solana-ruby-web3js//lib/solana_ruby/public_key.rb#46
  def decode_base58(value); end

  # source://solana-ruby-web3js//lib/solana_ruby/public_key.rb#58
  def to_bn(input); end

  # source://solana-ruby-web3js//lib/solana_ruby/public_key.rb#52
  def validate_length(data); end
end

# source://solana-ruby-web3js//lib/solana_ruby/public_key.rb#6
SolanaRuby::PublicKey::PUBLIC_KEY_LENGTH = T.let(T.unsafe(nil), Integer)

# source://solana-ruby-web3js//lib/solana_ruby/base_client.rb#37
class SolanaRuby::SolanaError < ::StandardError
  # @return [SolanaError] a new instance of SolanaError
  #
  # source://solana-ruby-web3js//lib/solana_ruby/base_client.rb#38
  def initialize(message); end

  # source://solana-ruby-web3js//lib/solana_ruby/base_client.rb#42
  def backtrace; end
end

# source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#5
class SolanaRuby::Transaction
  # @return [Transaction] a new instance of Transaction
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#13
  def initialize(recent_blockhash: T.unsafe(nil), signatures: T.unsafe(nil), instructions: T.unsafe(nil), fee_payer: T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#72
  def add(item); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#20
  def add_instruction(instruction); end

  # Returns the value of attribute fee_payer.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#11
  def fee_payer; end

  # Sets the attribute fee_payer
  #
  # @param value the value to set the attribute fee_payer to.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#11
  def fee_payer=(_arg0); end

  # Returns the value of attribute instructions.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#11
  def instructions; end

  # Sets the attribute instructions
  #
  # @param value the value to set the attribute instructions to.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#11
  def instructions=(_arg0); end

  # Returns the value of attribute message.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#11
  def message; end

  # Sets the attribute message
  #
  # @param value the value to set the attribute message to.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#11
  def message=(_arg0); end

  # Returns the value of attribute recent_blockhash.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#11
  def recent_blockhash; end

  # Sets the attribute recent_blockhash
  #
  # @param value the value to set the attribute recent_blockhash to.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#11
  def recent_blockhash=(_arg0); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#45
  def serialize; end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#24
  def set_fee_payer(pubkey); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#29
  def set_recent_blockhash(blockhash); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#76
  def sign(keypairs); end

  # Returns the value of attribute signatures.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#11
  def signatures; end

  # Sets the attribute signatures
  #
  # @param value the value to set the attribute signatures to.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#11
  def signatures=(_arg0); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#68
  def to_base64; end

  private

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#210
  def add_fee_payer_meta(unique_metas); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#239
  def add_instructs; end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#280
  def add_signature(pubkey, signature); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#198
  def add_unique_meta_data(unique_metas, account_metas); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#180
  def append_program_id(program_ids, account_metas); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#133
  def check_for_errors; end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#98
  def compile; end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#117
  def compile_message; end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#227
  def disallow_signers(signatures, unique_metas); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#149
  def fetch_message_data; end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#270
  def partial_sign(message, keys); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#94
  def serialize_message; end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#190
  def signer_order(account_metas); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#249
  def split_keys(unique_metas, signed_keys, unsigned_keys); end

  class << self
    # source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#34
    def from(base64_string); end
  end
end

# source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#9
SolanaRuby::Transaction::DEFAULT_SIGNATURE = T.let(T.unsafe(nil), Array)

# source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#8
SolanaRuby::Transaction::PACKET_DATA_SIZE = T.let(T.unsafe(nil), Integer)

# source://solana-ruby-web3js//lib/solana_ruby/transaction.rb#7
SolanaRuby::Transaction::SIGNATURE_LENGTH = T.let(T.unsafe(nil), Integer)

# source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#2
class SolanaRuby::TransactionHelper
  class << self
    # Method to create a system account (e.g., for SPL token or SOL)
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#53
    def account_instruction(from_pubkey, new_account_pubkey, lamports, space, program_id); end

    # Method to create a burn instruction for SPL tokens
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#222
    def burn_spl_token(token_account, mint, mint_authority, amount, multi_signers = T.unsafe(nil)); end

    # Helper to create a transaction for burning SPL tokens
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#240
    def burn_spl_tokens(token_account, mint, owner, amount, recent_blockhash, multi_signers = T.unsafe(nil)); end

    # Method to close an account (helper)
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#109
    def close_account(account_to_close, destination, owner, payer, multi_signers, recent_blockhash); end

    # Method to create a close account instruction
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#90
    def close_account_instruction(account_to_close, destination, owner, payer, multi_signers); end

    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#75
    def create_account(from_pubkey, new_account_pubkey, lamports, space, recent_blockhash, program_id = T.unsafe(nil)); end

    # Method to create an associated token account
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#169
    def create_associated_token_account(payer, mint, owner, recent_blockhash, program_id = T.unsafe(nil)); end

    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#271
    def create_instruction(keys, data, token_program_id = T.unsafe(nil)); end

    # Utility to decode data using predefined layouts
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#266
    def decode_data(fields, data); end

    # Utility to encode data using predefined layouts
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#260
    def encode_data(fields, data); end

    # Derive the associated token account address
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#255
    def get_associated_token_address(mint, owner, program_id); end

    # Method to create a mint instruction for SPL tokens
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#200
    def mint_spl_token(mint, destination, mint_authority, amount, multi_signers = T.unsafe(nil)); end

    # Helper to create a transaction for minting SPL tokens
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#212
    def mint_spl_tokens(mint, destination, mint_authority, amount, recent_blockhash, multi_signers = T.unsafe(nil)); end

    # Helper to create a new transaction for SPL token transfer
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#159
    def new_spl_token_transaction(source, mint, destination, owner, amount, decimals, recent_blockhash, multi_signers = T.unsafe(nil)); end

    # Helper to create a new transaction for SOL transfer
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#136
    def sol_transfer(from_pubkey, to_pubkey, lamports, recent_blockhash); end

    # Method to create a SOL transfer instruction
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#124
    def transfer_sol_instruction(from_pubkey, to_pubkey, lamports); end

    # Method to create an SPL token transfer instruction
    #
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#146
    def transfer_spl_token(source, token, destination, owner, amount, decimals, multi_signers); end
  end
end

# source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#8
SolanaRuby::TransactionHelper::ASSOCIATED_TOKEN_PROGRAM_ID = T.let(T.unsafe(nil), String)

# source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#12
SolanaRuby::TransactionHelper::INSTRUCTION_LAYOUTS = T.let(T.unsafe(nil), Hash)

# Constants for program IDs
#
# source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#6
SolanaRuby::TransactionHelper::SYSTEM_PROGRAM_ID = T.let(T.unsafe(nil), String)

# source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#9
SolanaRuby::TransactionHelper::SYSVAR_RENT_ID = T.let(T.unsafe(nil), String)

# source://solana-ruby-web3js//lib/solana_ruby/transaction_helper.rb#7
SolanaRuby::TransactionHelper::TOKEN_PROGRAM_ID = T.let(T.unsafe(nil), String)

# source://solana-ruby-web3js//lib/solana_ruby/transaction_helpers/token_account.rb#2
module SolanaRuby::TransactionHelpers; end

# source://solana-ruby-web3js//lib/solana_ruby/transaction_helpers/token_account.rb#3
class SolanaRuby::TransactionHelpers::TokenAccount
  class << self
    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helpers/token_account.rb#29
    def add_signers(keys, owner_or_authority, multi_signers); end

    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helpers/token_account.rb#44
    def find_program_address(seeds, program_id); end

    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helpers/token_account.rb#10
    def get_associated_token_address(mint, payer); end

    # source://solana-ruby-web3js//lib/solana_ruby/transaction_helpers/token_account.rb#66
    def hash_seeds(seeds, program_id); end
  end
end

# Associated Token Program ID
#
# source://solana-ruby-web3js//lib/solana_ruby/transaction_helpers/token_account.rb#5
SolanaRuby::TransactionHelpers::TokenAccount::ASSOCIATED_TOKEN_PROGRAM_ID = T.let(T.unsafe(nil), String)

# Token Program ID
#
# source://solana-ruby-web3js//lib/solana_ruby/transaction_helpers/token_account.rb#8
SolanaRuby::TransactionHelpers::TokenAccount::TOKEN_PROGRAM_ID = T.let(T.unsafe(nil), String)

# source://solana-ruby-web3js//lib/solana_ruby/transaction_instruction.rb#2
class SolanaRuby::TransactionInstruction
  # @return [TransactionInstruction] a new instance of TransactionInstruction
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction_instruction.rb#7
  def initialize(keys:, program_id:, data:); end

  # Returns the value of attribute data.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction_instruction.rb#5
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction_instruction.rb#5
  def data=(_arg0); end

  # Returns the value of attribute keys.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction_instruction.rb#5
  def keys; end

  # Sets the attribute keys
  #
  # @param value the value to set the attribute keys to.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction_instruction.rb#5
  def keys=(_arg0); end

  # Returns the value of attribute program_id.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction_instruction.rb#5
  def program_id; end

  # Sets the attribute program_id
  #
  # @param value the value to set the attribute program_id to.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/transaction_instruction.rb#5
  def program_id=(_arg0); end

  # source://solana-ruby-web3js//lib/solana_ruby/transaction_instruction.rb#13
  def serialize; end
end

# source://solana-ruby-web3js//lib/solana_ruby/utils.rb#5
class SolanaRuby::Utils
  class << self
    # Converts a Base58-encoded string to a byte array.
    #
    # source://solana-ruby-web3js//lib/solana_ruby/utils.rb#50
    def base58_to_bytes(base58_string); end

    # Converts a byte array to a Base58-encoded string.
    #
    # @raise [ArgumentError]
    #
    # source://solana-ruby-web3js//lib/solana_ruby/utils.rb#43
    def bytes_to_base58(bytes); end

    # Decodes a length-prefixed byte array using a variable-length encoding.
    #
    # @raise [ArgumentError]
    #
    # source://solana-ruby-web3js//lib/solana_ruby/utils.rb#8
    def decode_length(bytes); end

    # Encodes a length as a variable-length byte array.
    #
    # @raise [ArgumentError]
    #
    # source://solana-ruby-web3js//lib/solana_ruby/utils.rb#25
    def encode_length(length); end

    # Computes the SHA-256 hash of the given data and returns it as a hexadecimal string.
    #
    # @raise [ArgumentError]
    #
    # source://solana-ruby-web3js//lib/solana_ruby/utils.rb#59
    def sha256(data); end
  end
end

# source://solana-ruby-web3js//lib/solana_ruby/version.rb#4
SolanaRuby::VERSION = T.let(T.unsafe(nil), String)

# source://solana-ruby-web3js//lib/solana_ruby/web_socket_client.rb#10
class SolanaRuby::WebSocketClient
  include ::SolanaRuby::WebSocketHandlers
  include ::SolanaRuby::WebSocketMethods::AccountMethods
  include ::SolanaRuby::WebSocketMethods::LogMethods
  include ::SolanaRuby::WebSocketMethods::SignatureMethods
  include ::SolanaRuby::WebSocketMethods::RootMethods
  include ::SolanaRuby::WebSocketMethods::SlotMethods

  # @return [WebSocketClient] a new instance of WebSocketClient
  #
  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_client.rb#19
  def initialize(url, auto_reconnect: T.unsafe(nil), reconnect_delay: T.unsafe(nil)); end

  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_client.rb#84
  def attempt_reconnect; end

  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_client.rb#29
  def connect; end

  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_client.rb#72
  def handle_message(data); end

  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_client.rb#43
  def reconnect; end

  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_client.rb#48
  def subscribe(method, params = T.unsafe(nil), &block); end

  # Returns the value of attribute subscriptions.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_client.rb#17
  def subscriptions; end

  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_client.rb#62
  def unsubscribe(method, subscription_id); end
end

# source://solana-ruby-web3js//lib/solana_ruby/web_socket_handlers.rb#4
module SolanaRuby::WebSocketHandlers
  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_handlers.rb#5
  def setup_handlers(ws, client); end
end

# source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/account_methods.rb#4
module SolanaRuby::WebSocketMethods; end

# Acccount Related Web Socket Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/account_methods.rb#6
module SolanaRuby::WebSocketMethods::AccountMethods
  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/account_methods.rb#10
  def on_account_change(pubkey, options = T.unsafe(nil), &block); end

  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/account_methods.rb#24
  def on_program_account_change(program_id, options = T.unsafe(nil), filters = T.unsafe(nil), &block); end

  # Unsubscribe from account change updates
  #
  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/account_methods.rb#19
  def remove_account_change_listener(subscription_id); end

  # Unsubscribe from program account change updates
  #
  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/account_methods.rb#32
  def remove_program_account_listener(subscription_id); end
end

# source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/account_methods.rb#8
SolanaRuby::WebSocketMethods::AccountMethods::ENCODING_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/account_methods.rb#7
SolanaRuby::WebSocketMethods::AccountMethods::FINALIZED_OPTIONS = T.let(T.unsafe(nil), Hash)

# Log Related Web Socket Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/log_methods.rb#6
module SolanaRuby::WebSocketMethods::LogMethods
  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/log_methods.rb#7
  def on_logs(params = T.unsafe(nil), &block); end

  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/log_methods.rb#11
  def on_logs_for_account(public_key, &block); end

  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/log_methods.rb#16
  def on_logs_for_program(program_id, &block); end

  # Unsubscribe from logs updates
  #
  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/log_methods.rb#22
  def remove_logs_listener(subscription_id); end
end

# Root Related Web Socket Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/root_methods.rb#6
module SolanaRuby::WebSocketMethods::RootMethods
  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/root_methods.rb#7
  def on_root_change(&block); end

  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/root_methods.rb#11
  def remove_root_listener(subscription_id); end
end

# Signature Related Web Socket Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/signature_methods.rb#6
module SolanaRuby::WebSocketMethods::SignatureMethods
  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/signature_methods.rb#10
  def on_signature(signature, options = T.unsafe(nil), &block); end

  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/signature_methods.rb#15
  def on_signature_with_options(signature, options = T.unsafe(nil), &block); end

  # Unsubscribe from signature updates
  #
  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/signature_methods.rb#20
  def remove_signature_listener(subscription_id); end
end

# source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/signature_methods.rb#8
SolanaRuby::WebSocketMethods::SignatureMethods::BASE_64_ENCODING_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/signature_methods.rb#7
SolanaRuby::WebSocketMethods::SignatureMethods::FINALIZED_OPTIONS = T.let(T.unsafe(nil), Hash)

# Slot Related Web Socket Methods
#
# source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/slot_methods.rb#6
module SolanaRuby::WebSocketMethods::SlotMethods
  # Subscribe to slot change notifications.
  # Options can include parameters such as commitment level, encoding, etc.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/slot_methods.rb#9
  def on_slot_change(&block); end

  # Unsubscribe from slot change notifications.
  #
  # source://solana-ruby-web3js//lib/solana_ruby/web_socket_methods/slot_methods.rb#15
  def remove_slot_change_listener(subscription_id); end
end
