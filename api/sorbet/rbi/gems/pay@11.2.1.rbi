# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pay` gem.
# Please instead update this file by running `bin/tapioca gem pay`.


class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Access
  include ::ActiveModel::Serialization
  include ::Pay::Attributes
  extend ::Pay::Attributes::ClassMethods
  extend ::ActiveRecord::Import::Connection
end

# A subscription has moved from the Active status to the Past Due status. This will only be triggered when the initial transaction in a billing cycle is declined. Once the status moves to past due, it will not be triggered again in that billing cycle.
#
# source://pay//lib/pay/version.rb#1
module Pay
  # source://pay//lib/pay.rb#37
  def application_name; end

  # source://pay//lib/pay.rb#37
  def application_name=(val); end

  # source://pay//lib/pay.rb#47
  def automount_routes; end

  # source://pay//lib/pay.rb#47
  def automount_routes=(val); end

  # source://pay//lib/pay.rb#31
  def braintree_gateway; end

  # source://pay//lib/pay.rb#31
  def braintree_gateway=(val); end

  # source://pay//lib/pay.rb#38
  def business_address; end

  # source://pay//lib/pay.rb#38
  def business_address=(val); end

  # source://pay//lib/pay.rb#40
  def business_logo; end

  # source://pay//lib/pay.rb#40
  def business_logo=(val); end

  # source://pay//lib/pay.rb#39
  def business_name; end

  # source://pay//lib/pay.rb#39
  def business_name=(val); end

  # source://pay//lib/pay.rb#53
  def default_plan_name; end

  # source://pay//lib/pay.rb#53
  def default_plan_name=(val); end

  # source://pay//lib/pay.rb#50
  def default_product_name; end

  # source://pay//lib/pay.rb#50
  def default_product_name=(val); end

  # source://pay//lib/pay.rb#65
  def emails; end

  # source://pay//lib/pay.rb#65
  def emails=(val); end

  # source://pay//lib/pay.rb#59
  def enabled_processors; end

  # source://pay//lib/pay.rb#59
  def enabled_processors=(val); end

  # source://pay//lib/pay.rb#93
  def mail_arguments; end

  # source://pay//lib/pay.rb#93
  def mail_arguments=(val); end

  # source://pay//lib/pay.rb#102
  def mail_to; end

  # source://pay//lib/pay.rb#102
  def mail_to=(val); end

  # source://pay//lib/pay.rb#33
  def model_parent_class; end

  # source://pay//lib/pay.rb#33
  def model_parent_class=(val); end

  # source://pay//lib/pay.rb#89
  def parent_mailer; end

  # source://pay//lib/pay.rb#89
  def parent_mailer=(val); end

  # source://pay//lib/pay.rb#56
  def routes_path; end

  # source://pay//lib/pay.rb#56
  def routes_path=(val); end

  # source://pay//lib/pay.rb#62
  def send_emails; end

  # source://pay//lib/pay.rb#62
  def send_emails=(val); end

  # source://pay//lib/pay.rb#41
  def support_email; end

  # source://pay//lib/pay.rb#41
  def support_email=(val); end

  class << self
    # source://pay//lib/pay.rb#37
    def application_name; end

    # source://pay//lib/pay.rb#37
    def application_name=(val); end

    # source://pay//lib/pay.rb#47
    def automount_routes; end

    # source://pay//lib/pay.rb#47
    def automount_routes=(val); end

    # source://pay//lib/pay.rb#31
    def braintree_gateway; end

    # source://pay//lib/pay.rb#31
    def braintree_gateway=(val); end

    # source://pay//lib/pay.rb#38
    def business_address; end

    # source://pay//lib/pay.rb#38
    def business_address=(val); end

    # source://pay//lib/pay.rb#40
    def business_logo; end

    # source://pay//lib/pay.rb#40
    def business_logo=(val); end

    # source://pay//lib/pay.rb#39
    def business_name; end

    # source://pay//lib/pay.rb#39
    def business_name=(val); end

    # source://pay//lib/pay.rb#53
    def default_plan_name; end

    # source://pay//lib/pay.rb#53
    def default_plan_name=(val); end

    # source://pay//lib/pay.rb#50
    def default_product_name; end

    # source://pay//lib/pay.rb#50
    def default_product_name=(val); end

    # source://pay//lib/pay.rb#65
    def emails; end

    # source://pay//lib/pay.rb#65
    def emails=(val); end

    # source://pay//lib/pay.rb#59
    def enabled_processors; end

    # source://pay//lib/pay.rb#59
    def enabled_processors=(val); end

    # source://pay//lib/pay.rb#93
    def mail_arguments; end

    # source://pay//lib/pay.rb#93
    def mail_arguments=(val); end

    # source://pay//lib/pay.rb#102
    def mail_to; end

    # source://pay//lib/pay.rb#102
    def mail_to=(val); end

    # source://pay//lib/pay.rb#85
    def mailer; end

    # source://pay//lib/pay.rb#80
    def mailer=(value); end

    # source://pay//lib/pay.rb#33
    def model_parent_class; end

    # source://pay//lib/pay.rb#33
    def model_parent_class=(val); end

    # source://pay//lib/pay.rb#89
    def parent_mailer; end

    # source://pay//lib/pay.rb#89
    def parent_mailer=(val); end

    # source://pay//lib/pay.rb#127
    def resolve_option(option, *remaining_args); end

    # source://pay//lib/pay.rb#56
    def routes_path; end

    # source://pay//lib/pay.rb#56
    def routes_path=(val); end

    # @return [Boolean]
    #
    # source://pay//lib/pay.rb#118
    def send_email?(email_option, *remaining_args); end

    # source://pay//lib/pay.rb#62
    def send_emails; end

    # source://pay//lib/pay.rb#62
    def send_emails=(val); end

    # @yield [_self]
    # @yieldparam _self [Pay] the object that the method was called on
    #
    # source://pay//lib/pay.rb#114
    def setup; end

    # source://pay//lib/pay.rb#41
    def support_email; end

    # source://pay//lib/pay.rb#43
    def support_email=(value); end

    # source://pay//lib/pay.rb#143
    def sync(params); end
  end
end

# source://pay//lib/pay/errors.rb#14
class Pay::ActionRequired < ::Pay::PaymentError
  # source://pay//lib/pay/errors.rb#15
  def message; end
end

# source://pay//lib/pay/adapter.rb#2
module Pay::Adapter
  extend ::ActiveSupport::Concern

  class << self
    # source://pay//lib/pay/adapter.rb#5
    def current_adapter; end

    # source://pay//lib/pay/adapter.rb#13
    def json_column_type; end
  end
end

class Pay::ApplicationController < ::ActionController::Base
  private

  # source://actionview/8.0.2/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats, keys); end

  class << self
    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr_middleware_stack; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr_middleware_stack=(new_value); end
  end
end

class Pay::ApplicationJob < ::ActiveJob::Base; end

# Adds Pay methods to ActiveRecord models
#
# source://pay//lib/pay/attributes.rb#4
module Pay::Attributes
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Pay::Attributes::ClassMethods
end

# source://pay//lib/pay/attributes.rb#0
module Pay::Attributes::ClassMethods
  # source://pay//lib/pay/attributes.rb#96
  def pay_customer(options = T.unsafe(nil)); end

  # source://pay//lib/pay/attributes.rb#105
  def pay_merchant(options = T.unsafe(nil)); end
end

# source://pay//lib/pay/attributes.rb#7
module Pay::Attributes::CustomerExtension
  extend ::ActiveSupport::Concern

  # @raise [Pay::Error]
  #
  # source://pay//lib/pay/attributes.rb#48
  def add_payment_processor(processor_name, allow_fake: T.unsafe(nil), **attributes); end

  # source://pay//lib/pay/attributes.rb#70
  def cancel_active_pay_subscriptions!; end

  # source://pay//lib/pay/attributes.rb#60
  def payment_processor; end

  # Changes a user's payment processor
  #
  # This has several effects:
  # - Finds or creates a Pay::Customer for the process and marks it as default
  # - Removes the default flag from all other Pay::Customers
  # - Removes the default flag from all Pay::PaymentMethods
  #
  # @raise [Pay::Error]
  #
  # source://pay//lib/pay/attributes.rb#31
  def set_payment_processor(processor_name, allow_fake: T.unsafe(nil), **attributes); end
end

# source://pay//lib/pay/attributes.rb#75
module Pay::Attributes::MerchantExtension
  extend ::ActiveSupport::Concern

  # source://pay//lib/pay/attributes.rb#83
  def set_merchant_processor(processor_name, **attributes); end
end

# source://pay//lib/pay.rb#27
module Pay::Billable; end

# source://pay//lib/pay/billable/sync_customer.rb#3
module Pay::Billable::SyncCustomer
  extend ::ActiveSupport::Concern

  # @return [Boolean]
  #
  # source://pay//lib/pay/billable/sync_customer.rb#14
  def pay_should_sync_customer?; end

  private

  # source://pay//lib/pay/billable/sync_customer.rb#20
  def enqeue_customer_sync_job; end
end

# source://pay//lib/pay/braintree.rb#2
module Pay::Braintree
  extend ::Pay::Env

  class << self
    # source://pay//lib/pay/braintree.rb#72
    def configure_webhooks; end

    # @return [Boolean]
    #
    # source://pay//lib/pay/braintree.rb#41
    def enabled?; end

    # source://pay//lib/pay/braintree.rb#68
    def environment; end

    # source://pay//lib/pay/braintree.rb#64
    def merchant_id; end

    # source://pay//lib/pay/braintree.rb#60
    def private_key; end

    # source://pay//lib/pay/braintree.rb#56
    def public_key; end

    # source://pay//lib/pay/braintree.rb#47
    def setup; end
  end
end

# source://pay//lib/pay/braintree.rb#23
class Pay::Braintree::AuthorizationError < ::Pay::Braintree::Error
  # source://pay//lib/pay/braintree.rb#24
  def message; end
end

# source://pay//lib/pay/braintree.rb#3
class Pay::Braintree::Error < ::Pay::Error
  # @return [Error] a new instance of Error
  #
  # source://pay//lib/pay/braintree.rb#9
  def initialize(result); end

  # source://pay//lib/pay/braintree.rb#18
  def cause; end

  # For any manually raised Braintree error results (for failure responses)
  # we can raise this exception manually but treat it as if we wrapped an exception
  #
  # source://pay//lib/pay/braintree.rb#7
  def result; end
end

# source://pay//lib/pay/braintree.rb#29
module Pay::Braintree::Webhooks; end

# source://pay//lib/pay/braintree/webhooks/subscription_canceled.rb#6
class Pay::Braintree::Webhooks::SubscriptionCanceled
  # source://pay//lib/pay/braintree/webhooks/subscription_canceled.rb#7
  def call(event); end
end

# source://pay//lib/pay/braintree/webhooks/subscription_charged_successfully.rb#6
class Pay::Braintree::Webhooks::SubscriptionChargedSuccessfully
  # source://pay//lib/pay/braintree/webhooks/subscription_charged_successfully.rb#7
  def call(event); end
end

# source://pay//lib/pay/braintree/webhooks/subscription_charged_unsuccessfully.rb#6
class Pay::Braintree::Webhooks::SubscriptionChargedUnsuccessfully
  # source://pay//lib/pay/braintree/webhooks/subscription_charged_unsuccessfully.rb#7
  def call(event); end
end

# source://pay//lib/pay/braintree/webhooks/subscription_expired.rb#6
class Pay::Braintree::Webhooks::SubscriptionExpired
  # source://pay//lib/pay/braintree/webhooks/subscription_expired.rb#7
  def call(event); end
end

# source://pay//lib/pay/braintree/webhooks/subscription_trial_ended.rb#6
class Pay::Braintree::Webhooks::SubscriptionTrialEnded
  # source://pay//lib/pay/braintree/webhooks/subscription_trial_ended.rb#7
  def call(event); end
end

# source://pay//lib/pay/braintree/webhooks/subscription_went_active.rb#6
class Pay::Braintree::Webhooks::SubscriptionWentActive
  # source://pay//lib/pay/braintree/webhooks/subscription_went_active.rb#7
  def call(event); end
end

# source://pay//lib/pay/braintree/webhooks/subscription_went_past_due.rb#6
class Pay::Braintree::Webhooks::SubscriptionWentPastDue
  # source://pay//lib/pay/braintree/webhooks/subscription_went_past_due.rb#7
  def call(event); end
end

# source://pay//lib/pay/currency.rb#2
class Pay::Currency
  include ::ActionView::Helpers::NumberHelper

  # @return [Currency] a new instance of Currency
  #
  # source://pay//lib/pay/currency.rb#20
  def initialize(iso_code); end

  # If amount is 0.8, we want to display $0.008
  #
  # source://pay//lib/pay/currency.rb#47
  def additional_precision(amount); end

  # Returns the value of attribute attributes.
  #
  # source://pay//lib/pay/currency.rb#5
  def attributes; end

  # source://pay//lib/pay/currency.rb#60
  def delimiter; end

  # source://pay//lib/pay/currency.rb#64
  def format; end

  # source://pay//lib/pay/currency.rb#24
  def format_amount(amount, **options); end

  # Returns the precision to display
  #
  # If 1, returns 0
  # If 100, returns 2
  # If 1000, returns 3
  #
  # source://pay//lib/pay/currency.rb#42
  def precision; end

  # source://pay//lib/pay/currency.rb#56
  def separator; end

  # source://pay//lib/pay/currency.rb#72
  def subunit; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/currency.rb#68
  def subunit?; end

  # source://pay//lib/pay/currency.rb#76
  def subunit_to_unit; end

  # source://pay//lib/pay/currency.rb#52
  def unit; end

  class << self
    # source://pay//lib/pay/currency.rb#7
    def all; end

    # Takes an amount (in cents) and currency and returns the formatted version for the currency
    #
    # source://pay//lib/pay/currency.rb#15
    def format(amount, currency:, **options); end
  end
end

module Pay::CurrencyHelper
  def pay_amount_to_currency(object, **options); end
end

class Pay::CustomerSyncJob < ::Pay::ApplicationJob
  def perform(pay_customer_id); end
end

# source://pay//lib/pay/engine.rb#4
class Pay::Engine < ::Rails::Engine
  # Determines if a gem version matches requirements
  # Used for verifying that dependencies are correct
  #
  # @return [Boolean]
  #
  # source://pay//lib/pay/engine.rb#51
  def version_matches?(current:, required:); end

  class << self
    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end
  end
end

# source://pay//lib/pay/env.rb#2
module Pay::Env
  private

  # source://pay//lib/pay/env.rb#39
  def credentials; end

  # source://pay//lib/pay/env.rb#35
  def env; end

  # Search for environment variables
  #
  # We must handle a lot of different cases, including the new Rails 6
  # environment separated credentials files which have no nesting for
  # the current environment.
  #
  # 1. Check environment variable
  # 2. Check environment scoped credentials
  # 3. Check unscoped credentials
  # 4. Check scoped and unscoped secrets (removed in Rails 7.2)
  #
  # For example, find_value_by_name("stripe", "private_key") will check the following in order until it finds a value:
  #
  #   ENV["STRIPE_PRIVATE_KEY"]
  #   Rails.application.credentials.dig(:production, :stripe, :private_key)
  #   Rails.application.credentials.dig(:stripe, :private_key)
  #
  # source://pay//lib/pay/env.rb#21
  def find_value_by_name(scope, name); end
end

# https://avdi.codes/exception-causes-in-ruby-2-1/
#
# source://pay//lib/pay/errors.rb#3
class Pay::Error < ::StandardError; end

# source://pay//lib/pay/fake_processor.rb#2
module Pay::FakeProcessor; end

# source://pay//lib/pay/fake_processor.rb#3
class Pay::FakeProcessor::Error < ::Pay::Error; end

# source://pay//lib/pay/errors.rb#20
class Pay::InvalidPaymentMethod < ::Pay::PaymentError
  # source://pay//lib/pay/errors.rb#21
  def message; end
end

# source://pay//lib/pay/lemon_squeezy.rb#2
module Pay::LemonSqueezy
  extend ::Pay::Env

  class << self
    # source://pay//lib/pay/lemon_squeezy.rb#25
    def api_key; end

    # source://pay//lib/pay/lemon_squeezy.rb#47
    def configure_webhooks; end

    # source://pay//lib/pay/lemon_squeezy.rb#57
    def construct_from_webhook_event(event); end

    # @return [Boolean]
    #
    # source://pay//lib/pay/lemon_squeezy.rb#15
    def enabled?; end

    # source://pay//lib/pay/lemon_squeezy.rb#41
    def owner_from_passthrough(passthrough); end

    # source://pay//lib/pay/lemon_squeezy.rb#37
    def passthrough(owner:, **options); end

    # source://pay//lib/pay/lemon_squeezy.rb#21
    def setup; end

    # source://pay//lib/pay/lemon_squeezy.rb#33
    def signing_secret; end

    # source://pay//lib/pay/lemon_squeezy.rb#29
    def store_id; end

    # An Order may have subscriptions or be a one-time purchase
    #
    # source://pay//lib/pay/lemon_squeezy.rb#78
    def sync_order(order_id, object: T.unsafe(nil)); end
  end
end

# source://pay//lib/pay/lemon_squeezy.rb#3
class Pay::LemonSqueezy::Error < ::Pay::Error
  # source://pay//lib/pay/lemon_squeezy.rb#4
  def message(*_arg0, **_arg1, &_arg2); end
end

# source://pay//lib/pay/lemon_squeezy.rb#7
module Pay::LemonSqueezy::Webhooks; end

# source://pay//lib/pay/lemon_squeezy/webhooks/order.rb#4
class Pay::LemonSqueezy::Webhooks::Order
  # source://pay//lib/pay/lemon_squeezy/webhooks/order.rb#5
  def call(order); end
end

# source://pay//lib/pay/lemon_squeezy/webhooks/subscription.rb#4
class Pay::LemonSqueezy::Webhooks::Subscription
  # source://pay//lib/pay/lemon_squeezy/webhooks/subscription.rb#5
  def call(subscription); end
end

# source://pay//lib/pay/lemon_squeezy/webhooks/subscription_payment.rb#4
class Pay::LemonSqueezy::Webhooks::SubscriptionPayment
  # source://pay//lib/pay/lemon_squeezy/webhooks/subscription_payment.rb#5
  def call(subscription_invoice); end
end

# source://pay//lib/pay/nano_id.rb#2
module Pay::NanoId
  class << self
    # source://pay//lib/pay/nano_id.rb#7
    def generate(size: T.unsafe(nil)); end
  end
end

# Generates unique IDs - faster than UUID
#
# source://pay//lib/pay/nano_id.rb#4
Pay::NanoId::ALPHABET = T.let(T.unsafe(nil), String)

# source://pay//lib/pay/nano_id.rb#5
Pay::NanoId::ALPHABET_SIZE = T.let(T.unsafe(nil), Integer)

# source://pay//lib/pay/paddle_billing.rb#2
module Pay::PaddleBilling
  extend ::Pay::Env

  class << self
    # source://pay//lib/pay/paddle_billing.rb#34
    def api_key; end

    # source://pay//lib/pay/paddle_billing.rb#30
    def client_token; end

    # source://pay//lib/pay/paddle_billing.rb#42
    def configure_webhooks; end

    # @return [Boolean]
    #
    # source://pay//lib/pay/paddle_billing.rb#14
    def enabled?; end

    # source://pay//lib/pay/paddle_billing.rb#26
    def environment; end

    # source://pay//lib/pay/paddle_billing.rb#21
    def setup; end

    # source://pay//lib/pay/paddle_billing.rb#38
    def signing_secret; end

    # source://pay//lib/pay/paddle_billing.rb#57
    def sync_transaction(transaction_id); end
  end
end

# source://pay//lib/pay/paddle_billing.rb#3
class Pay::PaddleBilling::Error < ::Pay::Error
  # source://pay//lib/pay/paddle_billing.rb#4
  def message(*_arg0, **_arg1, &_arg2); end
end

# source://pay//lib/pay/paddle_billing.rb#7
module Pay::PaddleBilling::Webhooks; end

# source://pay//lib/pay/paddle_billing/webhooks/subscription.rb#4
class Pay::PaddleBilling::Webhooks::Subscription
  # source://pay//lib/pay/paddle_billing/webhooks/subscription.rb#5
  def call(event); end
end

# source://pay//lib/pay/paddle_billing/webhooks/transaction_completed.rb#4
class Pay::PaddleBilling::Webhooks::TransactionCompleted
  # source://pay//lib/pay/paddle_billing/webhooks/transaction_completed.rb#5
  def call(event); end
end

# source://pay//lib/pay/paddle_classic.rb#2
module Pay::PaddleClassic
  extend ::Pay::Env

  class << self
    # source://pay//lib/pay/paddle_classic.rb#25
    def client; end

    # source://pay//lib/pay/paddle_classic.rb#71
    def configure_webhooks; end

    # @return [Boolean]
    #
    # source://pay//lib/pay/paddle_classic.rb#18
    def enabled?; end

    # source://pay//lib/pay/paddle_classic.rb#41
    def environment; end

    # source://pay//lib/pay/paddle_classic.rb#65
    def owner_from_passthrough(passthrough); end

    # source://pay//lib/pay/paddle_classic.rb#61
    def parse_passthrough(passthrough); end

    # source://pay//lib/pay/paddle_classic.rb#57
    def passthrough(owner:, **options); end

    # source://pay//lib/pay/paddle_classic.rb#45
    def public_key; end

    # source://pay//lib/pay/paddle_classic.rb#53
    def public_key_base64; end

    # source://pay//lib/pay/paddle_classic.rb#49
    def public_key_file; end

    # source://pay//lib/pay/paddle_classic.rb#37
    def vendor_auth_code; end

    # source://pay//lib/pay/paddle_classic.rb#33
    def vendor_id; end
  end
end

# source://pay//lib/pay/paddle_classic.rb#3
class Pay::PaddleClassic::Error < ::Pay::Error
  # source://pay//lib/pay/paddle_classic.rb#4
  def message(*_arg0, **_arg1, &_arg2); end
end

# source://pay//lib/pay/paddle_classic.rb#7
module Pay::PaddleClassic::Webhooks; end

# source://pay//lib/pay/paddle_classic/webhooks/signature_verifier.rb#8
class Pay::PaddleClassic::Webhooks::SignatureVerifier
  # @return [SignatureVerifier] a new instance of SignatureVerifier
  #
  # source://pay//lib/pay/paddle_classic/webhooks/signature_verifier.rb#9
  def initialize(data); end

  # source://pay//lib/pay/paddle_classic/webhooks/signature_verifier.rb#16
  def verify; end

  private

  # https://github.com/jqr/php-serialize/blob/master/lib/php_serialize.rb
  #
  # Returns a string representing the argument in a form PHP.unserialize
  # and PHP's unserialize() should both be able to load.
  #
  #   string = PHP.serialize(mixed var[, bool assoc])
  #
  # Array, Hash, Fixnum, Float, True/FalseClass, NilClass, String and Struct
  # are supported; as are objects which support the to_assoc method, which
  # returns an array of the form [['attr_name', 'value']..].  Anything else
  # will raise a TypeError.
  #
  # If 'assoc' is specified, Array's who's first element is a two value
  # array will be assumed to be an associative array, and will be serialized
  # as a PHP associative array rather than a multidimensional array.
  #
  # source://pay//lib/pay/paddle_classic/webhooks/signature_verifier.rb#63
  def serialize(var, assoc = T.unsafe(nil)); end
end

# source://pay//lib/pay/paddle_classic/webhooks/subscription_cancelled.rb#4
class Pay::PaddleClassic::Webhooks::SubscriptionCancelled
  # source://pay//lib/pay/paddle_classic/webhooks/subscription_cancelled.rb#5
  def call(event); end
end

# source://pay//lib/pay/paddle_classic/webhooks/subscription_created.rb#4
class Pay::PaddleClassic::Webhooks::SubscriptionCreated
  # source://pay//lib/pay/paddle_classic/webhooks/subscription_created.rb#5
  def call(event); end
end

# source://pay//lib/pay/paddle_classic/webhooks/subscription_payment_refunded.rb#4
class Pay::PaddleClassic::Webhooks::SubscriptionPaymentRefunded
  # source://pay//lib/pay/paddle_classic/webhooks/subscription_payment_refunded.rb#5
  def call(event); end
end

# source://pay//lib/pay/paddle_classic/webhooks/subscription_payment_succeeded.rb#4
class Pay::PaddleClassic::Webhooks::SubscriptionPaymentSucceeded
  # source://pay//lib/pay/paddle_classic/webhooks/subscription_payment_succeeded.rb#5
  def call(event); end

  # source://pay//lib/pay/paddle_classic/webhooks/subscription_payment_succeeded.rb#24
  def create_charge(pay_customer, event); end

  # source://pay//lib/pay/paddle_classic/webhooks/subscription_payment_succeeded.rb#45
  def notify_user(pay_charge); end
end

# source://pay//lib/pay/paddle_classic/webhooks/subscription_updated.rb#4
class Pay::PaddleClassic::Webhooks::SubscriptionUpdated
  # source://pay//lib/pay/paddle_classic/webhooks/subscription_updated.rb#5
  def call(event); end
end

# source://pay//lib/pay/payment.rb#2
class Pay::Payment
  # @return [Payment] a new instance of Payment
  #
  # source://pay//lib/pay/payment.rb#12
  def initialize(intent); end

  # source://pay//lib/pay/payment.rb#5
  def amount(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/payment.rb#44
  def amount_with_currency; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#24
  def canceled?; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#28
  def cancelled?; end

  # source://pay//lib/pay/payment.rb#5
  def client_secret(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/payment.rb#5
  def confirm(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/payment.rb#5
  def currency(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/payment.rb#5
  def customer(*_arg0, **_arg1, &_arg2); end

  # source://pay//lib/pay/payment.rb#5
  def id(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute intent.
  #
  # source://pay//lib/pay/payment.rb#3
  def intent; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#36
  def payment_intent?; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#20
  def requires_action?; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#16
  def requires_payment_method?; end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#40
  def setup_intent?; end

  # source://pay//lib/pay/payment.rb#5
  def status(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://pay//lib/pay/payment.rb#32
  def succeeded?; end

  # source://pay//lib/pay/payment.rb#48
  def validate; end

  class << self
    # source://pay//lib/pay/payment.rb#7
    def from_id(id); end
  end
end

# source://pay//lib/pay/errors.rb#6
class Pay::PaymentError < ::StandardError
  # @return [PaymentError] a new instance of PaymentError
  #
  # source://pay//lib/pay/errors.rb#9
  def initialize(payment); end

  # Returns the value of attribute payment.
  #
  # source://pay//lib/pay/errors.rb#7
  def payment; end
end

class Pay::PaymentsController < ::Pay::ApplicationController
  def show; end

  private

  # source://actionview/8.0.2/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats, keys); end

  def set_redirect_to; end

  class << self
    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr__layout; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr__layout=(new_value); end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr__layout_conditions; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr__layout_conditions=(new_value); end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr_middleware_stack; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr_middleware_stack=(new_value); end
  end
end

# source://pay//lib/pay/receipts.rb#2
module Pay::Receipts
  # source://pay//lib/pay/receipts.rb#73
  def discount_description(discount); end

  # source://pay//lib/pay/receipts.rb#3
  def filename; end

  # source://pay//lib/pay/receipts.rb#136
  def invoice; end

  # source://pay//lib/pay/receipts.rb#140
  def invoice_details; end

  # source://pay//lib/pay/receipts.rb#132
  def invoice_filename; end

  # source://pay//lib/pay/receipts.rb#168
  def invoice_number; end

  # source://pay//lib/pay/receipts.rb#148
  def invoice_pdf(**options); end

  # source://pay//lib/pay/receipts.rb#24
  def pdf_line_items; end

  # source://pay//lib/pay/receipts.rb#20
  def pdf_product_name; end

  # source://pay//lib/pay/receipts.rb#8
  def receipt; end

  # source://pay//lib/pay/receipts.rb#12
  def receipt_details; end

  # source://pay//lib/pay/receipts.rb#3
  def receipt_filename; end

  # def tax_description(tax_rate)
  #   percent = "#{ActiveSupport::NumberHelper.number_to_rounded(tax_rate.percentage, strip_insignificant_zeros: true)}%"
  #   percent += " inclusive" if tax_rate.inclusive
  #   "#{tax_rate.display_name} - #{tax_rate.jurisdiction} (#{percent})"
  # end
  #
  # source://pay//lib/pay/receipts.rb#90
  def receipt_line_items; end

  # source://pay//lib/pay/receipts.rb#172
  def receipt_number; end

  # source://pay//lib/pay/receipts.rb#112
  def receipt_pdf(**options); end
end

module Pay::Routing
  extend ::ActiveSupport::Concern
  include ::ActionDispatch::Routing::UrlFor

  def default_url_options; end
end

# source://pay//lib/pay.rb#135
Pay::SYNC_HANDLERS = T.let(T.unsafe(nil), Hash)

# source://pay//lib/pay/stripe.rb#2
module Pay::Stripe
  extend ::Pay::Env

  # source://pay//lib/pay/stripe.rb#34
  def model_names; end

  # source://pay//lib/pay/stripe.rb#34
  def model_names=(val); end

  class << self
    # source://pay//lib/pay/stripe.rb#71
    def configure_webhooks; end

    # @return [Boolean]
    #
    # source://pay//lib/pay/stripe.rb#36
    def enabled?; end

    # source://pay//lib/pay/stripe.rb#131
    def find_by_client_reference_id(client_reference_id); end

    # source://pay//lib/pay/stripe.rb#34
    def model_names; end

    # source://pay//lib/pay/stripe.rb#34
    def model_names=(val); end

    # source://pay//lib/pay/stripe.rb#58
    def private_key; end

    # source://pay//lib/pay/stripe.rb#54
    def public_key; end

    # source://pay//lib/pay/stripe.rb#42
    def setup; end

    # source://pay//lib/pay/stripe.rb#62
    def signing_secret; end

    # Subscriptions aren't always immediately associated, so we want to retry by default
    #
    # source://pay//lib/pay/stripe.rb#146
    def sync_checkout_session(session_id, stripe_account: T.unsafe(nil), try: T.unsafe(nil), retries: T.unsafe(nil)); end

    # @raise [ArgumentError]
    #
    # source://pay//lib/pay/stripe.rb#126
    def to_client_reference_id(record); end

    # source://pay//lib/pay/stripe.rb#66
    def webhook_receive_test_events; end
  end
end

# source://pay//lib/pay/stripe.rb#3
class Pay::Stripe::Error < ::Pay::Error; end

# source://pay//lib/pay/stripe.rb#30
Pay::Stripe::REQUIRED_VERSION = T.let(T.unsafe(nil), String)

# source://pay//lib/pay/stripe.rb#6
module Pay::Stripe::Webhooks; end

# source://pay//lib/pay/stripe/webhooks/account_updated.rb#4
class Pay::Stripe::Webhooks::AccountUpdated
  # source://pay//lib/pay/stripe/webhooks/account_updated.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/charge_refunded.rb#4
class Pay::Stripe::Webhooks::ChargeRefunded
  # source://pay//lib/pay/stripe/webhooks/charge_refunded.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/charge_succeeded.rb#4
class Pay::Stripe::Webhooks::ChargeSucceeded
  # source://pay//lib/pay/stripe/webhooks/charge_succeeded.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/charge_updated.rb#4
class Pay::Stripe::Webhooks::ChargeUpdated
  # source://pay//lib/pay/stripe/webhooks/charge_updated.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/checkout_session_async_payment_succeeded.rb#4
class Pay::Stripe::Webhooks::CheckoutSessionAsyncPaymentSucceeded < ::Pay::Stripe::Webhooks::CheckoutSessionCompleted; end

# source://pay//lib/pay/stripe/webhooks/checkout_session_completed.rb#4
class Pay::Stripe::Webhooks::CheckoutSessionCompleted
  # source://pay//lib/pay/stripe/webhooks/checkout_session_completed.rb#5
  def call(event); end

  # source://pay//lib/pay/stripe/webhooks/checkout_session_completed.rb#21
  def locate_owner(object); end
end

# source://pay//lib/pay/stripe/webhooks/customer_deleted.rb#4
class Pay::Stripe::Webhooks::CustomerDeleted
  # source://pay//lib/pay/stripe/webhooks/customer_deleted.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/customer_updated.rb#4
class Pay::Stripe::Webhooks::CustomerUpdated
  # source://pay//lib/pay/stripe/webhooks/customer_updated.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/payment_action_required.rb#4
class Pay::Stripe::Webhooks::PaymentActionRequired
  # source://pay//lib/pay/stripe/webhooks/payment_action_required.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/payment_failed.rb#4
class Pay::Stripe::Webhooks::PaymentFailed
  # source://pay//lib/pay/stripe/webhooks/payment_failed.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/payment_intent_succeeded.rb#4
class Pay::Stripe::Webhooks::PaymentIntentSucceeded
  # This webhook does NOT send notifications because stripe sends both
  # `charge.succeeded` and `payment_intent.succeeded` events.
  #
  # We use `charge.succeeded` as the single place to send notifications
  #
  # source://pay//lib/pay/stripe/webhooks/payment_intent_succeeded.rb#10
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/payment_method_attached.rb#4
class Pay::Stripe::Webhooks::PaymentMethodAttached
  # source://pay//lib/pay/stripe/webhooks/payment_method_attached.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/payment_method_detached.rb#4
class Pay::Stripe::Webhooks::PaymentMethodDetached
  # source://pay//lib/pay/stripe/webhooks/payment_method_detached.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/payment_method_updated.rb#4
class Pay::Stripe::Webhooks::PaymentMethodUpdated
  # source://pay//lib/pay/stripe/webhooks/payment_method_updated.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/subscription_created.rb#4
class Pay::Stripe::Webhooks::SubscriptionCreated
  # source://pay//lib/pay/stripe/webhooks/subscription_created.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/subscription_deleted.rb#4
class Pay::Stripe::Webhooks::SubscriptionDeleted
  # source://pay//lib/pay/stripe/webhooks/subscription_deleted.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/subscription_renewing.rb#4
class Pay::Stripe::Webhooks::SubscriptionRenewing
  # Handles `invoice.upcoming` webhook from Stripe
  # Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your subscriptions settings. Note: The received Invoice object will not have an invoice ID.
  #
  # source://pay//lib/pay/stripe/webhooks/subscription_renewing.rb#8
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/subscription_trial_will_end.rb#4
class Pay::Stripe::Webhooks::SubscriptionTrialWillEnd
  # source://pay//lib/pay/stripe/webhooks/subscription_trial_will_end.rb#5
  def call(event); end
end

# source://pay//lib/pay/stripe/webhooks/subscription_updated.rb#4
class Pay::Stripe::Webhooks::SubscriptionUpdated
  # source://pay//lib/pay/stripe/webhooks/subscription_updated.rb#5
  def call(event); end
end

# source://pay//lib/pay/version.rb#2
Pay::VERSION = T.let(T.unsafe(nil), String)

# source://pay//lib/pay/webhooks.rb#2
module Pay::Webhooks
  class << self
    # source://pay//lib/pay/webhooks.rb#7
    def configure(*_arg0, **_arg1, &_arg2); end

    # source://pay//lib/pay/webhooks.rb#9
    def delegator; end

    # source://pay//lib/pay/webhooks.rb#7
    def instrument(*_arg0, **_arg1, &_arg2); end
  end
end

class Pay::Webhooks::BraintreeController < ::Pay::ApplicationController
  def create; end

  private

  # source://actionview/8.0.2/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats, keys); end

  def queue_event(event); end
  def verified_event; end

  class << self
    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr_middleware_stack; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr_middleware_stack=(new_value); end
  end
end

# source://pay//lib/pay/webhooks/delegator.rb#3
class Pay::Webhooks::Delegator
  # @return [Delegator] a new instance of Delegator
  #
  # source://pay//lib/pay/webhooks/delegator.rb#6
  def initialize; end

  # Listen to all events
  #
  # source://pay//lib/pay/webhooks/delegator.rb#23
  def all(callable = T.unsafe(nil), &block); end

  # Returns the value of attribute backend.
  #
  # source://pay//lib/pay/webhooks/delegator.rb#4
  def backend; end

  # Configure DSL
  #
  # @raise [ArgumentError]
  #
  # source://pay//lib/pay/webhooks/delegator.rb#11
  def configure(&block); end

  # Called to process an event
  #
  # source://pay//lib/pay/webhooks/delegator.rb#34
  def instrument(event:, type:); end

  # @return [Boolean]
  #
  # source://pay//lib/pay/webhooks/delegator.rb#38
  def listening?(type); end

  # Subscribe to specific events
  #
  # source://pay//lib/pay/webhooks/delegator.rb#17
  def subscribe(name, callable = T.unsafe(nil), &block); end

  # Unsubscribe
  #
  # source://pay//lib/pay/webhooks/delegator.rb#29
  def unsubscribe(name); end

  private

  # source://pay//lib/pay/webhooks/delegator.rb#60
  def name_with_namespace(name, delimiter: T.unsafe(nil)); end

  # source://pay//lib/pay/webhooks/delegator.rb#56
  def to_regexp(name); end
end

# Strips down to event data only
#
# source://pay//lib/pay/webhooks/delegator.rb#43
class Pay::Webhooks::Delegator::NotificationAdapter
  # @return [NotificationAdapter] a new instance of NotificationAdapter
  #
  # source://pay//lib/pay/webhooks/delegator.rb#44
  def initialize(subscriber); end

  # source://pay//lib/pay/webhooks/delegator.rb#48
  def call(*args); end
end

class Pay::Webhooks::LemonSqueezyController < ::Pay::ApplicationController
  def create; end

  private

  # source://actionview/8.0.2/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats, keys); end

  def queue_event(event); end
  def valid_signature?(signature); end
  def verify_params; end

  class << self
    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr_middleware_stack; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr_middleware_stack=(new_value); end
  end
end

class Pay::Webhooks::PaddleBillingController < ::Pay::ApplicationController
  def create; end

  private

  # source://actionview/8.0.2/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats, keys); end

  def queue_event(event); end
  def valid_signature?(paddle_signature); end
  def verify_params; end

  class << self
    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr_middleware_stack; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr_middleware_stack=(new_value); end
  end
end

class Pay::Webhooks::PaddleClassicController < ::Pay::ApplicationController
  def create; end

  private

  # source://actionview/8.0.2/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats, keys); end

  def queue_event(event); end
  def verified_event; end
  def verify_params; end

  class << self
    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr_middleware_stack; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr_middleware_stack=(new_value); end
  end
end

# source://pay//lib/pay/webhooks/process_job.rb#3
class Pay::Webhooks::ProcessJob < ::Pay::ApplicationJob
  # source://pay//lib/pay/webhooks/process_job.rb#4
  def perform(pay_webhook); end
end

class Pay::Webhooks::StripeController < ::Pay::ApplicationController
  def create; end

  private

  # source://actionview/8.0.2/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats, keys); end

  def log_error(e); end
  def queue_event(event); end
  def secrets(payload, signature); end
  def verified_event; end

  class << self
    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr_middleware_stack; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr_middleware_stack=(new_value); end
  end
end
