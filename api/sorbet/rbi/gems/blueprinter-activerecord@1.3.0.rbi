# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `blueprinter-activerecord` gem.
# Please instead update this file by running `bin/tapioca gem blueprinter-activerecord`.


class ActiveRecord::Base
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::Access
  include ::ActiveModel::Serialization
  extend ::BlueprinterActiveRecord::QueryMethods::Delegates
  extend ::ActiveRecord::Import::Connection
end

class ActiveRecord::Relation
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::BlueprinterActiveRecord::QueryMethods
end

# source://blueprinter-activerecord//lib/blueprinter-activerecord.rb#6
module BlueprinterActiveRecord; end

# A Blueprinter extension to log what preloads were found and added by the BlueprinterActiveRecord::Preloader extension.
#
# This extension may safely be used alongside the BlueprinterActiveRecord::MissingPreloadsLogger extension. Each query will
# only be processed by one.
#
# NOTE Only queries that pass through a Blueprint's "render" method will be found.
#
#   Blueprinter.configure do |config|
#     # The Preloader extension MUST be added first!
#     config.extensions << BlueprinterActiveRecord::Preloader.new
#
#     config.extensions << BlueprinterActiveRecord::AddedPreloadsLogger.new do |info|
#       next unless info.found.any?
#
#       Rails.logger.info({
#         event: "added_preloads",
#         root_model: info.query.model.name,
#         sql: info.query.to_sql,
#         added: info.found.map { |x| x.join " > " },
#         percent_added: info.percent_found,
#         trace: info.trace,
#       }.to_json)
#     end
#   end
#
# source://blueprinter-activerecord//lib/blueprinter-activerecord/added_preloads_logger.rb#30
class BlueprinterActiveRecord::AddedPreloadsLogger < ::Blueprinter::Extension
  include ::BlueprinterActiveRecord::Helpers

  # Initialize and configure the extension.
  #
  # @return [AddedPreloadsLogger] a new instance of AddedPreloadsLogger
  # @yield [BlueprinterActiveRecord::PreloadInfo] Your logging action
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/added_preloads_logger.rb#38
  def initialize(&log_proc); end

  # source://blueprinter-activerecord//lib/blueprinter-activerecord/added_preloads_logger.rb#42
  def pre_render(object, blueprint, view, options); end
end

# source://blueprinter-activerecord//lib/blueprinter-activerecord/helpers.rb#4
module BlueprinterActiveRecord::Helpers
  extend ::BlueprinterActiveRecord::Helpers

  # Count the number of preloads in a nested Hash.
  #
  # @param preloads [Hash] Nested Hash of preloads
  # @return [Integer] The number of associations in the Hash
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/helpers.rb#23
  def count_preloads(preloads); end

  # Finds preloads from 'after' that are missing in 'before'.
  #
  # @param before [Hash] The extracted preloads from before Preloader ran
  # @param after [Hash] The extracted preloads from after Preloader ran
  # @param diff [Array<BlueprinterActiveRecord::MissingPreload>] internal use
  # @param path [Array<Symbol>] internal use
  # @return [Array<Array<Symbol>>] the preloads missing from 'before' . They're in a "path" structure, with the last element of each sub-array being the missing preload, e.g. `[[:widget], [:project, :company]]`
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/helpers.rb#38
  def diff_preloads(before, after, diff = T.unsafe(nil), path = T.unsafe(nil)); end

  # Combines all types of preloads (preload, includes, eager_load) into a single nested hash
  #
  # @param q [ActiveRecord::Relation]
  # @return [Hash] Symbol keys with Hash values of arbitrary depth
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/helpers.rb#13
  def extract_preloads(q); end

  # Merges 'values', which may be any nested structure of arrays, hashes, strings, and symbols into a nested hash.
  #
  # @param value [Array|Hash|String|Symbol]
  # @param result [Hash]
  # @return [Hash] Symbol keys with Hash values of arbitrary depth
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/helpers.rb#54
  def merge_values(value, result = T.unsafe(nil)); end
end

# A Blueprinter extension to log what COULD have been preloaded with the BlueprinterActiveRecord::Preloader extension.
#
# This extension may safely be used alongside the BlueprinterActiveRecord::Preloader and BlueprinterActiveRecord::AddedPreloadsLogger
# extensions. Any queries processed by those extensions will be ignored by this one.
#
# NOTE Only queries that pass through a Blueprint's "render" method will be found.
#
#   Blueprinter.configure do |config|
#     config.extensions << BlueprinterActiveRecord::MissingPreloadsLogger.new do |info|
#       next unless info.found.any?
#
#       Rails.logger.info({
#         event: "missing_preloads",
#         root_model: info.query.model.name,
#         sql: info.query.to_sql,
#         missing: info.found.map { |x| x.join " > " },
#         percent_missing: info.percent_found,
#         trace: info.trace,
#       }.to_json)
#     end
#   end
#
# source://blueprinter-activerecord//lib/blueprinter-activerecord/missing_preloads_logger.rb#27
class BlueprinterActiveRecord::MissingPreloadsLogger < ::Blueprinter::Extension
  include ::BlueprinterActiveRecord::Helpers

  # Initialize and configure the extension.
  #
  # @return [MissingPreloadsLogger] a new instance of MissingPreloadsLogger
  # @yield [BlueprinterActiveRecord::PreloadInfo] Your logging action
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/missing_preloads_logger.rb#35
  def initialize(&log_proc); end

  # source://blueprinter-activerecord//lib/blueprinter-activerecord/missing_preloads_logger.rb#39
  def pre_render(object, blueprint, view, options); end
end

# Info about preloads from a query that was run through a Blueprinter's render method.
#
# Used for logging by the BlueprinterActiveRecord::MissingPreloadsLogger and BlueprinterActiveRecord::AddedPreloadsLogger extensions.
#
# source://blueprinter-activerecord//lib/blueprinter-activerecord/preload_info.rb#9
class BlueprinterActiveRecord::PreloadInfo
  include ::BlueprinterActiveRecord::Helpers

  # @param query [ActiveRecord::Relation] The query passed to "render"
  # @param from_code [Hash] Nested Hash of preloads, includes, and eager_loads that were present in query when passed to "render"
  # @param from_blueprint [Hash] Nested Hash of associations pulled from the Blueprint view
  # @param trace [Array<String>] Stack trace to query
  # @return [PreloadInfo] a new instance of PreloadInfo
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/preload_info.rb#24
  def initialize(query, from_code, from_blueprint, trace); end

  # @return [Array<Array<Symbol>>] Array of "preload paths" (e.g. [[:project, :company]]) to missing preloads that could have been found & added by BlueprinterActiveRecord::Preloader
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/preload_info.rb#43
  def found; end

  # @return [Hash] Nested hash of all preloads, both manually added and auto found
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/preload_info.rb#53
  def hash; end

  # @return [Integer] The number of preloads, includes, and eager_loads that existed before BlueprinterActiveRecord was involved
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/preload_info.rb#38
  def num_existing; end

  # @return [Integer] The percent of total preloads found by BlueprinterActiveRecord
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/preload_info.rb#32
  def percent_found; end

  # @return [ActiveRecord::Relation] The base query
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/preload_info.rb#13
  def query; end

  # @return [Array<String>] Stack trace to the query
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/preload_info.rb#16
  def trace; end

  # @return [Array<Array<Symbol>>] Array of "preload paths" (e.g. [[:project, :company]]) from the blueprint that were visible to the preloader
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/preload_info.rb#48
  def visible; end
end

# A Blueprinter extension to automatically preload a Blueprint view's ActiveRecord associations during render
#
# source://blueprinter-activerecord//lib/blueprinter-activerecord/preloader.rb#5
class BlueprinterActiveRecord::Preloader < ::Blueprinter::Extension
  include ::BlueprinterActiveRecord::Helpers

  # Initialize and configure the extension.
  #
  # @param auto [true|false] When true, preload for EVERY ActiveRecord::Relation passed to a Blueprint
  # @param use [:preload|:includes] When `auto` is true, use this method (e.g. :preload) for preloading
  # @return [Preloader] a new instance of Preloader
  # @yield [Object, Class, Symbol, Hash] Instead of passing `auto` as a boolean, you may define a block that accepts the object to render, the blueprint class, the view, and options. If the block returns true, auto preloading will take place.
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/preloader.rb#18
  def initialize(auto: T.unsafe(nil), use: T.unsafe(nil), &auto_proc); end

  # Returns the value of attribute auto.
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/preloader.rb#9
  def auto; end

  # Returns the value of attribute auto_proc.
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/preloader.rb#9
  def auto_proc; end

  # Implements the "pre_render" Blueprinter Extension to preload associations from a view.
  # If auto is true, all ActiveRecord::Relation and ActiveRecord::AssociationRelation objects
  # will be preloaded. If auto is false, only queries that have called `.preload_blueprint`
  # will be preloaded.
  #
  # NOTE: If auto is on, *don't* be concerned that you'll end up with duplicate preloads. Even if
  # the query ends up with overlapping members in 'preload' and 'includes', ActiveRecord
  # intelligently handles them. There are several unit tests which confirm this behavior.
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/preloader.rb#40
  def pre_render(object, blueprint, view, options); end

  # Returns the value of attribute use.
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/preloader.rb#9
  def use; end

  class << self
    # source://blueprinter-activerecord//lib/blueprinter-activerecord/preloader.rb#97
    def association_preloads(assoc, model, cycles); end

    # source://blueprinter-activerecord//lib/blueprinter-activerecord/preloader.rb#119
    def count_cycles(blueprint, view, cycles); end

    # Returns an ActiveRecord preload plan extracted from the Blueprint and view (recursive).
    #
    # Preloads are found when one of the model's associations matches:
    # 1. A Blueprint association name.
    # 2. A :preload option on a field or association.
    #
    # Example:
    #
    #   preloads = BlueprinterActiveRecord::Preloader.preloads(WidgetBlueprint, :extended, model: Widget)
    #   q = Widget.where(...).order(...).preload(preloads)
    #
    # @param blueprint [Class] The Blueprint class
    # @param view_name [Symbol] Name of the view in blueprint
    # @param model [Class|:polymorphic] The ActiveRecord model class that blueprint represents
    # @param cycles [Hash<String, Integer>] (internal) Preloading will halt if recursion/cycles gets too high
    # @return [Hash] A Hash containing preload/eager_load/etc info for ActiveRecord
    #
    # source://blueprinter-activerecord//lib/blueprinter-activerecord/preloader.rb#75
    def preloads(blueprint, view_name, model:, cycles: T.unsafe(nil)); end
  end
end

# source://blueprinter-activerecord//lib/blueprinter-activerecord/preloader.rb#7
BlueprinterActiveRecord::Preloader::DEFAULT_MAX_RECURSION = T.let(T.unsafe(nil), Integer)

# source://blueprinter-activerecord//lib/blueprinter-activerecord/query_methods.rb#4
module BlueprinterActiveRecord::QueryMethods
  # Get the preloads present before the Preloader extension ran (internal, for PreloadLogger)
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/query_methods.rb#60
  def before_preload_blueprint; end

  # Set the preloads present before the Preloader extension ran (internal, for PreloadLogger)
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/query_methods.rb#65
  def before_preload_blueprint=(val); end

  # Automatically preload (or `eager_load` or `includes`) the associations in the given
  # blueprint and view (recursively).
  #
  # You can have the Blueprint and view autodetected on render:
  #
  #   q = Widget.where(...).preload_blueprint
  #   WidgetBlueprint.render(q, view: :extended)
  #
  # Or you can pass them up front:
  #
  #   widgets = Widget.where(...).preload_blueprint(WidgetBlueprint, :extended).to_a
  #   # do something with widgets, then render
  #   WidgetBlueprint.render(widgets, view: :extended)
  #
  # @param blueprint [Class] The Blueprinter class to use (ignore to autodetect on render)
  # @param view [Symbol] The Blueprinter view name to use (ignore to autodetect on render)
  # @param use [Symbol] The eager loading strategy to use (:preload, :includes, :eager_load)
  # @return [ActiveRecord::Relation]
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/query_methods.rb#33
  def preload_blueprint(blueprint = T.unsafe(nil), view = T.unsafe(nil), use: T.unsafe(nil)); end

  # See preload_blueprint
  #
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/query_methods.rb#38
  def preload_blueprint!(blueprint = T.unsafe(nil), view = T.unsafe(nil), use: T.unsafe(nil)); end

  # source://blueprinter-activerecord//lib/blueprinter-activerecord/query_methods.rb#55
  def preload_blueprint_method; end
end

# source://blueprinter-activerecord//lib/blueprinter-activerecord/query_methods.rb#11
BlueprinterActiveRecord::QueryMethods::ACTIONS = T.let(T.unsafe(nil), Array)

# source://blueprinter-activerecord//lib/blueprinter-activerecord/query_methods.rb#5
module BlueprinterActiveRecord::QueryMethods::Delegates
  # source://blueprinter-activerecord//lib/blueprinter-activerecord/query_methods.rb#6
  def preload_blueprint(blueprint = T.unsafe(nil), view = T.unsafe(nil), use: T.unsafe(nil)); end
end

# source://blueprinter-activerecord//lib/blueprinter-activerecord/railtie.rb#2
class BlueprinterActiveRecord::Railtie < ::Rails::Railtie; end

# source://blueprinter-activerecord//lib/blueprinter-activerecord/version.rb#4
BlueprinterActiveRecord::VERSION = T.let(T.unsafe(nil), String)
