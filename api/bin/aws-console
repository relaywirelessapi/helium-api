#!/bin/bash

# Get app name from Terraform
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
APP_NAME=$(terraform -chdir="${SCRIPT_DIR}/../tf" output -raw app_name)

# Configuration
CLUSTER_NAME="${APP_NAME}-cluster"
SERVICE_NAME="${APP_NAME}-web"
CONTAINER_NAME="${APP_NAME}-web"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print status messages
print_status() {
    echo -e "${GREEN}==>${NC} $1"
}

# Function to print warnings
print_warning() {
    echo -e "${YELLOW}Warning:${NC} $1"
}

# Check if AWS CLI is installed
if ! command -v aws &> /dev/null; then
    echo "Error: AWS CLI is not installed"
    exit 1
fi

# Check if we're logged in to AWS
if ! aws sts get-caller-identity &> /dev/null; then
    echo "Error: Not logged in to AWS. Please run 'aws configure' first"
    exit 1
fi

print_status "Finding the latest task for service ${SERVICE_NAME}..."

# Get the task ARN
TASK_ID=$(aws ecs list-tasks \
    --cluster "${CLUSTER_NAME}" \
    --service-name "${SERVICE_NAME}" \
    --output text \
    --query 'taskArns[0]' | awk -F/ '{print $3}')

if [ -z "$TASK_ID" ]; then
    echo "Error: No running tasks found for service ${SERVICE_NAME}"
    exit 1
fi

print_status "Found task: ${TASK_ID}"
print_status "Connecting to container..."
print_warning "After connecting, run 'bundle exec rails console' to start the Rails console"

# Connect to the container
aws ecs execute-command \
    --cluster "${CLUSTER_NAME}" \
    --task "${TASK_ID}" \
    --container "${CONTAINER_NAME}" \
    --command "/bin/bash" \
    --interactive
