#!/usr/bin/env ruby
# frozen_string_literal: true

APP_PATH = File.expand_path("../config/application", __dir__)
require_relative "../config/environment"

INPUT_PATH = Rails.root.join("tmp/helium-protobuf")
OUTPUT_PATH = Rails.root.join("vendor/helium-protobuf")

# This is taken from https://github.com/helium/proto/blob/master/build-cpp.sh,
# with some additions needed to decode the messages we sync.
SERVICES = %w[
  downlink
  iot_config
  local
  mobile_config
  multi_buy
  packet_router
  packet_verifier
  poc_lora
  poc_mobile
  router
  state_channel
  follower
  transaction
].map { |path| "service/#{path}" }.freeze
MESSAGES = %w[
  blockchain_txn
  entropy
  data_rate
  region
  mapper
  price_report
  decimal
  hex_boosting
  service_provider
  reward_manifest
].freeze

SOURCE_PATHS = [*SERVICES, *MESSAGES].map do |source_path|
  "#{INPUT_PATH}/src/#{source_path}.proto"
end.freeze

def execute_command(command, error_message = nil)
  puts "Executing: #{command}"
  output = `#{command} 2>&1`
  result = $?.success?
  unless result
    puts "Error: #{error_message || 'Command failed'}"
    puts "Output: #{output}"
    exit 1
  end
end

# Clean up and clone the repository
FileUtils.rm_rf(INPUT_PATH) if Dir.exist?(INPUT_PATH)
execute_command("git clone https://github.com/helium/proto.git #{INPUT_PATH}", "Failed to clone Helium proto repository")

# Prepare output directory
FileUtils.rm_rf(OUTPUT_PATH) if Dir.exist?(OUTPUT_PATH)
FileUtils.mkdir_p(OUTPUT_PATH)

# Generate Ruby code from proto files
execute_command("protoc -I=#{INPUT_PATH}/src --ruby_out=#{OUTPUT_PATH} #{SOURCE_PATHS.join(" ")}", "Failed to generate Ruby code from proto files")

# Add Rails compatibility to generated files
puts "Adding Rails compatibility to generated files..."
Dir.glob("#{OUTPUT_PATH}/**/*.rb") do |file|
  content = File.read(file)

  # Remove any existing frozen_string_literal or source comments that might be duplicated
  content = content.gsub(/^# frozen_string_literal.*$/, '')
  content = content.gsub(/^# Generated by the protocol buffer compiler.*$/, '')
  content = content.gsub(/^# source:.*$/, '')

  # Clean up any consecutive empty lines that might result from the removals
  content = content.gsub(/\n{3,}/, "\n\n")

  File.open(file, mode: "w") do |f|
    f.write(<<~RUBY)
      # typed: ignore
      # frozen_string_literal: true

      # Generated by the protocol buffer compiler.  DO NOT EDIT!
      # source: #{File.basename(file, '.rb')}.proto
      $LOAD_PATH.unshift Rails.root.join("vendor/helium-protobuf")

      #{content.strip}
    RUBY
  end
end

# Update type definitions
execute_command("bin/types", "Failed to update type definitions")

puts "Protocol buffer code generation completed successfully!"
