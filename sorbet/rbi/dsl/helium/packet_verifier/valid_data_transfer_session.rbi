# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Helium::PacketVerifier::Valid_data_transfer_session`.
# Please instead update this file by running `bin/tapioca dsl Helium::PacketVerifier::Valid_data_transfer_session`.


class Helium::PacketVerifier::Valid_data_transfer_session < Google::Protobuf::AbstractMessage
  sig do
    params(
      download_bytes: T.nilable(Integer),
      first_timestamp: T.nilable(Integer),
      last_timestamp: T.nilable(Integer),
      num_dcs: T.nilable(Integer),
      payer: T.nilable(String),
      pub_key: T.nilable(String),
      rewardable_bytes: T.nilable(Integer),
      upload_bytes: T.nilable(Integer)
    ).void
  end
  def initialize(download_bytes: nil, first_timestamp: nil, last_timestamp: nil, num_dcs: nil, payer: nil, pub_key: nil, rewardable_bytes: nil, upload_bytes: nil); end

  sig { void }
  def clear_download_bytes; end

  sig { void }
  def clear_first_timestamp; end

  sig { void }
  def clear_last_timestamp; end

  sig { void }
  def clear_num_dcs; end

  sig { void }
  def clear_payer; end

  sig { void }
  def clear_pub_key; end

  sig { void }
  def clear_rewardable_bytes; end

  sig { void }
  def clear_upload_bytes; end

  sig { returns(Integer) }
  def download_bytes; end

  sig { params(value: Integer).void }
  def download_bytes=(value); end

  sig { returns(Integer) }
  def first_timestamp; end

  sig { params(value: Integer).void }
  def first_timestamp=(value); end

  sig { returns(Integer) }
  def last_timestamp; end

  sig { params(value: Integer).void }
  def last_timestamp=(value); end

  sig { returns(Integer) }
  def num_dcs; end

  sig { params(value: Integer).void }
  def num_dcs=(value); end

  sig { returns(String) }
  def payer; end

  sig { params(value: String).void }
  def payer=(value); end

  sig { returns(String) }
  def pub_key; end

  sig { params(value: String).void }
  def pub_key=(value); end

  sig { returns(Integer) }
  def rewardable_bytes; end

  sig { params(value: Integer).void }
  def rewardable_bytes=(value); end

  sig { returns(Integer) }
  def upload_bytes; end

  sig { params(value: Integer).void }
  def upload_bytes=(value); end
end
