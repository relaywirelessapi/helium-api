# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `clockwork` gem.
# Please instead update this file by running `bin/tapioca gem clockwork`.


# TERMINOLOGY
#
# For clarity, we have chosen to define terms as follows for better communication in the code, and when
# discussing the database event implementation.
#
# "Event":      "Native" Clockwork events, whether Clockwork::Event or Clockwork::DatabaseEvents::Event
# "Model":      Database-backed model instances representing events to be created in Clockwork
#
# source://clockwork//lib/clockwork/at.rb#1
module Clockwork
  extend ::Clockwork::Methods
  include ::Clockwork::Methods

  mixes_in_class_methods ::Clockwork::Methods

  class << self
    # @private
    #
    # source://clockwork//lib/clockwork.rb#11
    def included(klass); end

    # source://clockwork//lib/clockwork.rb#16
    def manager; end

    # source://clockwork//lib/clockwork.rb#20
    def manager=(manager); end
  end
end

# source://clockwork//lib/clockwork/at.rb#2
class Clockwork::At
  # @raise [ArgumentError]
  # @return [At] a new instance of At
  #
  # source://clockwork//lib/clockwork/at.rb#38
  def initialize(min, hour = T.unsafe(nil), wday = T.unsafe(nil)); end

  # source://clockwork//lib/clockwork/at.rb#51
  def ==(other); end

  # Returns the value of attribute hour.
  #
  # source://clockwork//lib/clockwork/at.rb#36
  def hour; end

  # Sets the attribute hour
  #
  # @param value the value to set the attribute hour to.
  #
  # source://clockwork//lib/clockwork/at.rb#36
  def hour=(_arg0); end

  # Returns the value of attribute min.
  #
  # source://clockwork//lib/clockwork/at.rb#36
  def min; end

  # Sets the attribute min
  #
  # @param value the value to set the attribute min to.
  #
  # source://clockwork//lib/clockwork/at.rb#36
  def min=(_arg0); end

  # @return [Boolean]
  #
  # source://clockwork//lib/clockwork/at.rb#45
  def ready?(t); end

  # Returns the value of attribute wday.
  #
  # source://clockwork//lib/clockwork/at.rb#36
  def wday; end

  # Sets the attribute wday
  #
  # @param value the value to set the attribute wday to.
  #
  # source://clockwork//lib/clockwork/at.rb#36
  def wday=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://clockwork//lib/clockwork/at.rb#56
  def valid?; end

  class << self
    # source://clockwork//lib/clockwork/at.rb#12
    def parse(at); end
  end
end

# source://clockwork//lib/clockwork/at.rb#3
class Clockwork::At::FailedToParse < ::StandardError; end

# source://clockwork//lib/clockwork/at.rb#5
Clockwork::At::NOT_SPECIFIED = T.let(T.unsafe(nil), T.untyped)

# source://clockwork//lib/clockwork/at.rb#6
Clockwork::At::WDAYS = T.let(T.unsafe(nil), Hash)

# source://clockwork//lib/clockwork/event.rb#2
class Clockwork::Event
  # @return [Event] a new instance of Event
  #
  # source://clockwork//lib/clockwork/event.rb#5
  def initialize(manager, period, job, block, options = T.unsafe(nil)); end

  # source://clockwork//lib/clockwork/event.rb#19
  def convert_timezone(t); end

  # Returns the value of attribute job.
  #
  # source://clockwork//lib/clockwork/event.rb#3
  def job; end

  # Sets the attribute job
  #
  # @param value the value to set the attribute job to.
  #
  # source://clockwork//lib/clockwork/event.rb#3
  def job=(_arg0); end

  # Returns the value of attribute last.
  #
  # source://clockwork//lib/clockwork/event.rb#3
  def last; end

  # Sets the attribute last
  #
  # @param value the value to set the attribute last to.
  #
  # source://clockwork//lib/clockwork/event.rb#3
  def last=(_arg0); end

  # source://clockwork//lib/clockwork/event.rb#35
  def run(t); end

  # @return [Boolean]
  #
  # source://clockwork//lib/clockwork/event.rb#23
  def run_now?(t); end

  # @return [Boolean]
  #
  # source://clockwork//lib/clockwork/event.rb#31
  def thread?; end

  # source://clockwork//lib/clockwork/event.rb#52
  def to_s; end

  private

  # @return [Boolean]
  #
  # source://clockwork//lib/clockwork/event.rb#73
  def elapsed_ready?(t); end

  # source://clockwork//lib/clockwork/event.rb#57
  def execute; end

  # @return [Boolean]
  #
  # source://clockwork//lib/clockwork/event.rb#77
  def run_at?(t); end

  # @return [Boolean]
  #
  # source://clockwork//lib/clockwork/event.rb#81
  def run_if?(t); end

  # source://clockwork//lib/clockwork/event.rb#85
  def validate_if_option(if_option); end
end

# source://clockwork//lib/clockwork/manager.rb#2
class Clockwork::Manager
  # @return [Manager] a new instance of Manager
  #
  # source://clockwork//lib/clockwork/manager.rb#7
  def initialize; end

  # Returns the value of attribute config.
  #
  # source://clockwork//lib/clockwork/manager.rb#5
  def config; end

  # @yield [config]
  #
  # source://clockwork//lib/clockwork/manager.rb#21
  def configure; end

  # source://clockwork//lib/clockwork/manager.rb#28
  def default_configuration; end

  # source://clockwork//lib/clockwork/manager.rb#38
  def error_handler(&block); end

  # source://clockwork//lib/clockwork/manager.rb#48
  def every(period, job = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://clockwork//lib/clockwork/manager.rb#60
  def fire_callbacks(event, *args); end

  # source://clockwork//lib/clockwork/manager.rb#102
  def graceful_shutdown; end

  # source://clockwork//lib/clockwork/manager.rb#153
  def handle_error(e); end

  # source://clockwork//lib/clockwork/manager.rb#83
  def handle_signal(sig); end

  # @raise [NoHandlerDefined]
  #
  # source://clockwork//lib/clockwork/manager.rb#32
  def handler(&block); end

  # source://clockwork//lib/clockwork/manager.rb#157
  def log(msg); end

  # source://clockwork//lib/clockwork/manager.rb#149
  def log_error(e); end

  # source://clockwork//lib/clockwork/manager.rb#145
  def logger; end

  # source://clockwork//lib/clockwork/manager.rb#43
  def on(event, options = T.unsafe(nil), &block); end

  # source://clockwork//lib/clockwork/manager.rb#64
  def run; end

  # source://clockwork//lib/clockwork/manager.rb#119
  def run_tick_loop; end

  # source://clockwork//lib/clockwork/manager.rb#96
  def shutdown; end

  # source://clockwork//lib/clockwork/manager.rb#109
  def stop_tick_loop; end

  # @return [Boolean]
  #
  # source://clockwork//lib/clockwork/manager.rb#17
  def thread_available?; end

  # source://clockwork//lib/clockwork/manager.rb#131
  def tick(t = T.unsafe(nil)); end

  # source://clockwork//lib/clockwork/manager.rb#113
  def wait_tick_loop_finishes; end

  private

  # source://clockwork//lib/clockwork/manager.rb#162
  def events_to_run(t); end

  # source://clockwork//lib/clockwork/manager.rb#180
  def every_with_multiple_times(period, job, options = T.unsafe(nil), &block); end

  # source://clockwork//lib/clockwork/manager.rb#174
  def register(period, job, block, options); end
end

# source://clockwork//lib/clockwork/manager.rb#3
class Clockwork::Manager::NoHandlerDefined < ::RuntimeError; end

# source://clockwork//lib/clockwork.rb#25
module Clockwork::Methods
  # source://clockwork//lib/clockwork.rb#50
  def clear!; end

  # source://clockwork//lib/clockwork.rb#26
  def configure(&block); end

  # source://clockwork//lib/clockwork.rb#34
  def error_handler(&block); end

  # source://clockwork//lib/clockwork.rb#42
  def every(period, job, options = T.unsafe(nil), &block); end

  # source://clockwork//lib/clockwork.rb#30
  def handler(&block); end

  # source://clockwork//lib/clockwork.rb#38
  def on(event, options = T.unsafe(nil), &block); end

  # source://clockwork//lib/clockwork.rb#46
  def run; end
end
