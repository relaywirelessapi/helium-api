name: CI

on:
  pull_request:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  lint-ruby:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        linter: [brakeman, rubocop, sorbet]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy environment file
        run: cp api/.env.ci api/.env

      - name: Run ${{ matrix.linter }}
        run: |
          if [ "${{ matrix.linter }}" = "brakeman" ]; then
            docker compose run --rm --no-deps web bin/brakeman --no-pager
          elif [ "${{ matrix.linter }}" = "rubocop" ]; then
            docker compose run --rm --no-deps web bin/rubocop -f github
          elif [ "${{ matrix.linter }}" = "sorbet" ]; then
            docker compose run --rm --no-deps web bundle exec spoom srb tc
          fi

  lint-js:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy environment file
        run: cp api/.env.ci api/.env

      - name: Audit JS dependencies
        run: docker compose run --rm --no-deps web bin/importmap audit

  verify-schema:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy environment file
        run: cp api/.env.ci api/.env

      - name: Generate current schema
        run: docker compose run --rm --no-deps web bundle exec rails graphql:schema:idl

      - name: Compare schemas
        run: diff api/schema.graphql docs/graphql/schema.graphql

  test-ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy environment file
        run: cp api/.env.ci api/.env

      - name: Prepare the database
        run: docker compose run --rm -e RAILS_ENV=test web bundle exec rails db:prepare

      - name: Run RSpec
        run: docker compose run --rm web bundle exec rspec

  lint-tf:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: |
            api/tf/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('api/tf/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Validate Terraform
        run: |
          terraform -chdir=api/tf init -backend=false
          terraform -chdir=api/tf validate

  deploy:
    needs: [lint-ruby, lint-js, lint-tf, test-ruby, verify-schema]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    concurrency:
      group: production-deployment
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: api/tf/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('api/tf/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Deploy to ECS
        run: api/bin/deploy
