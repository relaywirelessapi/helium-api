# Instance Spy Pattern

When testing interactions between objects in RSpec, use `instance_spy` to verify method calls:

## Guidelines

1. Use `instance_spy` when you need to verify that specific methods were called on an object
2. Create helper methods prefixed with `stub_` to set up test doubles consistently
3. Use `allow(...).to receive(:new).and_return(spy)` to inject the spy into the system under test
4. Use `expect(spy).to have_received(:method_name).with(arguments)` to verify method calls
5. Return the spy from helper methods to allow expectations to be set in the test
6. Prefer `instance_spy` over `instance_double` when focusing on verifying method calls rather than stubbing return values

## Examples

```ruby
# Helper method to create and inject a spy
def stub_file_processor
  processor = instance_spy(Relay::Helium::L2::FileContentSyncer)
  allow(Relay::Helium::L2::FileContentSyncer).to receive(:new).and_return(processor)
  processor
end

# Using the spy in a test
it "processes the file using FileContentSyncer" do
  file = create(:some_file)
  processor = stub_file_processor

  described_class.new.perform(file)

  expect(processor).to have_received(:process).with(file)
end
```

This pattern is particularly useful for testing service objects, jobs, and other classes where you want to verify that the correct collaborators are called with the right arguments, without being concerned about the implementation details of those collaborators. 
