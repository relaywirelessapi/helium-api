---
description: Guidelines for using test doubles and mocks in RSpec tests
globs: *.rb
alwaysApply: false
---

# Test Doubles and Mocking Pattern

When using test doubles and mocks in RSpec tests, follow these guidelines:

## Guidelines

1. Use `instance_double` instead of `double` when mocking specific classes to ensure type safety
2. Use `allow` for setting up test conditions and `expect` for verifying behavior
3. Place expectations before the action that should trigger them
4. Use descriptive variable names for test doubles that indicate what they represent
5. Verify method calls with specific arguments using `.with()`
6. Use `described_class` to refer to the class under test rather than repeating the class name
7. Chain method stubs with `.and_yield()` for methods that yield values
8. Create helper methods for complex test double setup

## Examples

```ruby
# Setting up test doubles
file_definition = instance_double(MyClass, id: "some_id", category: "some_category")

# Stubbing method calls
allow(MyClass).to receive(:all).and_return([file_definition])

# Expecting method calls with specific arguments
expect(OtherClass).to receive(:perform_later).with("some_id")

# Using described_class
described_class.new.perform

# Chaining method stubs with and_yield for iterators
client = instance_double(Client)
allow(client).to receive(:each_object)
  .with(definition, start_after: last_item)
  .and_yield(item1)
  .and_yield(item2)

# Complex setup with helper methods
def stub_client(definition:, items: [])
  client = instance_double(Client)

  allow_method = allow(client).to receive(:each_item).with(definition)

  items.each do |item|
    allow_method = allow_method.and_yield(item)
  end

  client
end
```
