---
description: Guidelines for using RSpec matchers and expectations effectively
globs: *.rb
alwaysApply: false
---

# RSpec Matchers and Expectations Pattern

When writing expectations in RSpec tests, use appropriate matchers for clear and expressive assertions:

## Guidelines

1. Use built-in RSpec matchers like `eq`, `be_truthy`, `include`, etc. for basic assertions
2. Use `have_attributes` to verify multiple attributes of an object at once
3. Use block expectations with `expect { ... }.to` syntax for testing code that changes state
4. Use `yield_successive_args` with block expectations to test methods that yield multiple values
5. Use predicate matchers (`be_valid`, `be_empty`) when appropriate
6. Use compound expectations with `and` when multiple conditions need to be verified

## Examples

```ruby
# Basic equality matcher
expect(result).to eq(expected_value)

# Attribute matcher
expect(user).to have_attributes(name: "John", role: "admin")

# Block expectation for state changes
expect { subject.process }.to change { Model.count }.by(2)

# Testing yielded values
expect { |b| subject.each_item(&b) }.to yield_successive_args(
  have_attributes(id: 1, name: "First"),
  have_attributes(id: 2, name: "Second")
)

# Predicate matchers
expect(collection).to be_empty
expect(user).to be_valid

# Compound expectations
expect(result).to be_success.and have_attributes(count: 3)
```
