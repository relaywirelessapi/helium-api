---
description: Guidelines for using Sorbet type checking in Ruby code and tests
globs: *.rb
alwaysApply: false
---

# Sorbet Type Checking Pattern

When working with Sorbet type checking in the codebase, follow these guidelines:

## Guidelines

1. Include a typed comment at the top of each file (`# typed: false`, `# typed: true`, `# typed: strict`, etc.)
2. Use `# typed: false` for test files to avoid type checking constraints during testing
3. Use `# typed: strict` or `# typed: strong` for production code when possible
4. Include type signatures for methods using `sig` blocks
5. Use appropriate Sorbet types (`T.nilable`, `T::Array`, etc.) for parameters and return values
6. Follow the project's conventions for gradually increasing type safety

## Examples

```ruby
# typed: strict

require 'sorbet-runtime'

class MyClass
  extend T::Sig

  sig { params(input: String).returns(T::Array[Integer]) }
  def process(input)
    input.chars.map(&:ord)
  end

  sig { params(value: T.nilable(String)).void }
  def handle_nullable(value)
    return if value.nil?
    process(value)
  end
end
```

For test files:

```ruby
# typed: false

RSpec.describe MyClass do
  # Tests without type constraints
end
```
